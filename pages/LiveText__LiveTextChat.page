<apex:page standardController="LiveText__Conversation_Session__c" extensions="LiveText.LiveTextChatController" >
<html xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
    <c:ScriptsComponent id="scmp" />
    <meta http-equiv="Content-Type" content="text/html; charset=utf-8"></meta>
    <apex:pageMessages id="lt_pageMessages" />
    <apex:includeScript value="{!URLFOR($Resource.LiveText__LiveText, 'js/forcetk.js')}" />
    <apex:includeScript value="{!URLFOR($Resource.LiveText__LiveText, '/js/tooltip.js')}" />
    <apex:includeScript value="/soap/ajax/36.0/connection.js" />
    <apex:includeScript value="/support/console/36.0/integration.js" />
    <apex:includeScript value="{!URLFOR($Resource.LiveText__LiveText, '/js/libphonenumber.js')}" />
    <apex:includeScript value="{!URLFOR($Resource.LiveText__LiveText, '/js/livetextglobal.js')}" />
    <apex:includeScript value="{!URLFOR($Resource.LiveText__LiveText, '/js/svg4everybody.js')}" />
    <apex:includeScript value="{!URLFOR($Resource.LiveText__LiveText, '/js/jquery.aljs-all-with-moment.min.js')}"/>
    <apex:stylesheet value="{!URLFOR($Resource.LiveText__SLDS202, 'assets/styles/salesforce-lightning-design-system-vf.css')}" />


    <style type="text/css">
        html{
            height:100%;
        }

        body{
            height:100%;
        }

        .box{
            padding: 0.5rem;
            width: auto;
        }

        .bottom-separator{
            border-bottom: 2px  solid rgb(206,    209,    213 );
        }

        .channel-logo{
            width:32px;
            height:32px;
        }

        .info-icon{
            fill: #a8b7c7;
        }

        .remove-margin-left{
            margin-left: 0px !important;
        }

        .bold-buttons{
            font-weight: bold !important;
        }

        .fixed-size-icon{
            width: 32px;
            height: 32px;
        }

        .pointer{
            cursor: pointer;
        }

        .cursor-disabled{
            cursor:not-allowed !important;
        }
        .read-only-input{
            border: none;
            background: none;
            cursor:
        }

        .chat-box{
            height: 23rem;
        }

        .avatar{
            max-width: 32px;
            max-height: 32px;
        }

        .custom-text-area{
            resize: none !important;
        }

        @media (min-width: 25em){
            .size-1-of-2{
                width: 50% !important;
            }
        }

        .username{
            color: #0000ff;
            display: inline !important;
            font-weight: bold;
            padding-left: 1rem;
        }
        .bot{
            color: #009900;
            display: inline !important;
            font-weight: bold;
            padding-left: 1rem;
        }
        .itr {
            color: #666666;
            display: inline !important;
            font-weight: bold;
            padding-left: 1rem;
        }
        .output{
            white-space:pre-wrap;
            word-wrap:break-word;
        }

        .agent-label_old{
            color: #0000ff;
            display: inline !important;
            font-weight: bold;
        }
        .recipient-label_old{
            color: #009900;
            display: inline !important;
            font-weight: bold;
        }
        .itr-label_old{
            color: #666666;
            display: inline !important;
            font-weight: bold;
        }

        .agent-label{
            color: #0000ff;
            display: inline !important;
            font-weight: bold;
        }
        .agent-box{
            border-radius: 0.5rem;
            border-bottom-right-radius: 0rem;
            padding: 0.5rem;
            background-color: #0070d2;
            color: white;
        }
        .agent-message{
            float: right;
        }
        .recipient-label{
            color: #009900;
            display: inline !important;
            font-weight: bold;
            padding-left: 1rem;
        }
        .recipient-box{
            border-radius: 0.5rem;
            border-bottom-left-radius: 0rem;
            padding: 0.5rem;
            background-color: #bcf5bc;
            color: black;
        }
        .recipient-message{
            float: left;
        }
        .itr-label {
            color: #666666;
            display: inline !important;
            font-weight: bold;
            padding-left: 1rem;
        }
        .itr-box{
            border-radius: 0.5rem;
            border-bottom-right-radius: 0rem;
            padding: 0.5rem;
            background-color: #777777;
            color: white;
        }
        .itr-message{
            float: right;
        }

        .small-padding{
            padding: 0.25rem !important;
        }

        .row-indicator{
            padding-bottom: 0.75rem !important;
        }

        .recipient-id{
            font-weight: bold;
            color: black;
            font-size: 1rem;
        }

        .chatBox-font{
            font-family: Arial,Helvetica,sans-serif;
            font-size: 0.9rem;
        }

        .color-grey{
            color: rgb(84, 105, 141);
         }

         .errorMessage{
            color: red;
            font-weight: bold;
            font-size: 0.75rem;
            padding-left: 5px;
         }

         .errorFont{
            color: #c23934;
         }

         .white-background{
            background-color: white !important;
         }

        .live-text .slds-has-error .slds-pill_container {
            background-color: white;
            border-color: #c23934;
            box-shadow: #c23934 0 0 0 1px inset;
            background-clip: padding-box;
        }

        .live-text .slds-has-error .slds-pill__icon {
            fill: #c23934;
        }

        .live-text .slds-has-error .slds-pill__remove .slds-button__icon{
            fill: #c23934;
        }

        #timeslotsList span.slds-icon-standard-account {
        		background-color: transparent !important;
        }

        .utility-icon {
			background-color: transparent !important;
		    border-radius: 0 !important;
		    fill: #54698d !important;
        }

        .typing:after {
            overflow: hidden;
            display: inline-block;
            vertical-align: bottom;
            -webkit-animation: ellipsis steps(4,end) 900ms infinite;
            animation: ellipsis steps(4,end) 900ms infinite;
            content: "\2026";
            width: 0px;
        }

        .buttonText {
            overflow: hidden;
            white-space: nowrap;
            display: block;
            text-overflow: ellipsis;
        }

        @media (max-width: 12.5em) {
            .buttonText {
                width: 5.6em;
            }
        }

        @media (max-width: 10.6em) {
            .buttonText {
                width: 2.8em;
            }
        }

        @media (max-width: 5.3em) {
            .buttonText {
                width: 1.25em;
            }
        }

        @keyframes ellipsis {
            to {
                width: 20px;
            }
        }

        @-webkit-keyframes ellipsis {
            to {
                width: 20px;
            }
        }
    </style>

<!-- NEW DEISGN HTML -->
    <div class="section group" style="height: 100%;">
        <div class="live-text" style="height: 100%;">
            <div class="slds-spinner_container" id="spinner">
                <div class="slds-spinner--brand slds-spinner slds-spinner--large" aria-hidden="false" role="alert">
                    <div class="slds-spinner__dot-a"></div>
                    <div class="slds-spinner__dot-b"></div>
                </div>
            </div>
            <div id="chatPageDiv" style="height: 100%;">
                <div class="box slds-grid slds-wrap slds-grid--align-spread">
                    <div class="slds-media slds-media_responsive slds-size--1-of-1 slds-grid--vertical-align-center" style="align-items: center;">
                        <div class="slds-media__figure">
                            <img class="channel-logo" src="{!URLFOR($Resource.LiveText, 'images/icon_sms.png')}"/>
                        </div>
                        <div class="slds-media__body slds-p-right--x-small">
                            <select id="supportNumberSelect" class="slds-select">
                            </select>
                        </div>
                        <div id="selectChannelTooltipIcon" class="slds-icon_container" title="{!$Label.SelectChannel}">
                            <svg aria-hidden="true" class="info-icon slds-icon--x-small ">
                                <use xlink:href="{!URLFOR($Resource.SLDS202, '/assets/icons/utility-sprite/svg/symbols.svg#info')}"></use>
                            </svg>
                        </div>
                    </div>
                </div>
                <div class="box bottom-separator">
                    <div class="slds-grid">
                        <div class="slds-media slds-size--1-of-1 slds-grid--vertical-align-center" style="align-items: center;" id="recipientChannelWithoutPhoto">
                            <div class="slds-media__figure">
                                <span class="slds-icon_container slds-icon-standard-avatar" id="default_avatar">
                                    <svg aria-hidden="true" class="slds-icon">
                                        <use xlink:href="{!URLFOR($Resource.SLDS202, 'assets/icons/standard-sprite/svg/symbols.svg#avatar')}"></use>
                                    </svg>
                                </span>
                            </div>
                            <div id="recipientInputWrapper" class="slds-size--1-of-1 slds-p-right--x-small">
                                <input class="slds-input slds-m-right--small" aria-describedby="recipientErrorMessage" id="recipientInputId" type="text"/>
                            </div>
                            <div id="recipientInputTooltipIcon" class="slds-icon_container" title="{!$Label.RecipientInputTooltip}">
                                <svg aria-hidden="true" class="info-icon slds-icon--x-small">
                                    <use xlink:href="{!URLFOR($Resource.SLDS202, '/assets/icons/utility-sprite/svg/symbols.svg#info')}"></use>
                                </svg>
                            </div>
                        </div>
                        <div class="slds-media slds-size--1-of-1 slds-grid--vertical-align-center" style="align-items: center;" id="recipientChannelWithPhoto">
                            <div class="slds-media__figure" id="userAvatar_parent" style="display: none;">
                                <img id="userAvatar" src="{!userAvatar}" class="avatar"></img>
                            </div>
                             <div class="slds-media__figure" id="fb_defaultAvatar">
                                <span class="slds-icon_container slds-icon-standard-avatar" >
                                    <svg aria-hidden="true" class="slds-icon">
                                        <use xlink:href="{!URLFOR($Resource.SLDS202, 'assets/icons/standard-sprite/svg/symbols.svg#avatar')}"></use>
                                    </svg>
                                </span>
                            </div>
                            <div class="recipient-id" id="recipientDisplay">
                            </div>
                        </div>
                    </div>
                    <div class="slds-media slds-size--1-of-1 slds-grid--vertical-align-center" style="align-items: center; display: none;" id="errorWrapper">
                        <!-- for proper margin -->
                        <div class="slds-media__figure">
                            <span class="slds-icon_container">
                                <svg aria-hidden="true" class="slds-icon">
                                </svg>
                            </span>
                        </div>
                        <div id="recipientErrorMessage" class="slds-form-element__help errorFont"></div>
                    </div>
                    <div class="slds-grid slds-grid--align-spread slds-p-top--small slds-grid--vertical-align-center">
                        <div>
                            <figure>
                                <span class="slds-icon_container slds-icon-utility-attach" id="popoverTrigger">
                                    <svg aria-hidden="true" class="slds-icon slds-icon-text-default slds-icon--x-small">
                                        <use xmlns:xlink="http://www.w3.org/1999/xlink" xlink:href="{!URLFOR($Resource.SLDS202, '/assets/icons/utility-sprite/svg/symbols.svg#attach')}">
                                        </use>
                                    </svg>
                                </span>
                            </figure>
                        </div>
                        <div>
                            <button class="slds-button slds-button--brand slds-size--1-of-1 bold-buttons" id="endSessionButton"><span class="buttonText">{!$Label.EndChatBtnLbl}</span></button>
                        </div>
                    </div>
                </div>
                <div class="box bottom-separator slds-scrollable--y chat-box" id="chatBox">
                </div>
                <div class="box bottom-separator slds-grid slds-wrap" id="conversationTextControls">
                    <div id="textControls" class="slds-size--1-of-1" style="display: block;">
                        <div class="text-area-box">
                            <textarea id="textareaInput" class="slds-textarea custom-text-area" style="cursor: auto;" placeholder="{!$Label.ActiveChatSendMsgPlaceholderLbl}"></textarea>
                        </div>
                        <div class="options-box">
                            <div class="attach slds-size--1-of-2 slds-float--left slds-p-top--small slds-grid slds-grid--vertical-align-center">
                                <div>
                                    <figure>
                                        <span class="slds-icon_container slds-icon-utility-image" id="cameraIcon">
                                            <svg aria-hidden="true" class="slds-icon slds-icon-text-default">
                                                <use xlink:href="{!URLFOR($Resource.SLDS202, '/assets/icons/utility-sprite/svg/symbols.svg#image')}"></use>
                                            </svg>
                                        </span>
                                        <img id="camera" style="height: 32px; width: 32px; display: none;" />
                                    </figure>
                                    <input style="display:none;" type="file" id="files" accept="image/gif, image/jpeg, image/png" />
                                </div>
                                <div id="addFormIconDiv" class="slds-p-left--small" style="display: none;">
                                    <figure>
                                        <span class="slds-icon_container slds-icon-utility-edit_form" id="addForm">
                                            <svg aria-hidden="true" class="slds-icon slds-icon-text-default">
                                                <use xmlns:xlink="http://www.w3.org/1999/xlink" xlink:href="{!URLFOR($Resource.SLDS202, '/assets/icons/utility-sprite/svg/symbols.svg#edit_form')}">
                                                </use>
                                            </svg>
                                        </span>
                                    </figure>
                                </div>
                            </div>
                            <div class="send-sms slds-size--1-of-2 slds-float--right slds-text-align--right slds-p-top--small">
                                <span id="characterCount" style="padding-right: 0.5rem;"></span>
                                <button id="sendMessage" class="slds-button slds-button--brand">{!$Label.ChatPageSendBtn}</button>
                            </div>
                        </div>
                    </div>
                    <div id="attachOptionsArea" class="slds-size--1-of-1" style="display: none;">
                        <div class="slds-grid slds-wrap">
                            <button class="slds-button slds-button--brand slds-size--1-of-1 remove-margin-left bold-buttons" id="sendImageRequestButton">{!$Label.ChatPageImageRequestBtn}</button>
                            <button class="slds-button slds-button--brand slds-size--1-of-1 slds-m-top--small remove-margin-left bold-buttons" id="sendImageMMS" onclick='j$("#files").trigger("click");'>{!$Label.ChatPageAttachImageBtn}</button>
                            <button class="slds-button slds-button--brand slds-size--1-of-1 slds-m-top--small remove-margin-left bold-buttons" id="removeAttachedImage" style="display:none;" onclick='removeAttachedFile()'>{!$Label.ChatPageRemoveImageBtn}</button>
                            <button class="slds-button slds-button--brand slds-size--1-of-1 slds-m-top--small remove-margin-left bold-buttons" id="closeAttachOptionsButton">{!$Label.BulkCancelButton}</button>
                        </div>
                    </div>
                </div>
                <div class="box bottom-separator slds-grid slds-wrap" id="conversationFormControls" style="display: none;">
                    <div class="slds-size--1-of-1" style="display: block; height: 100%;" id="formPreview">
                        <div class="text-area-box slds-scrollable--y" style="height: 100%; margin-right: -0.5rem">
                            <div id="formOutput" style="cursor: auto;" onclick="formPreviewClick()"></div>
                        </div>
                        <div class="options-box">
                            <div class="send-sms slds-size--1-of-2 slds-float--right slds-text-align--right slds-p-top--small slds-p-bottom--small">
                                <button id="sendForm" class="slds-button slds-button--brand">{!$Label.ChatPageSendBtn}</button>
                            </div>
                        </div>
                    </div>
                    <div id="addFormOptions" class="slds-size--1-of-1" style="display: none;">
                        <div class="slds-grid slds-wrap">
                            <button class="slds-button slds-button--brand slds-size--1-of-1 remove-margin-left" id="removeForm" onclick="removeForm();">{!$Label.ChatPageRemoveFormBtn}</button>
                            <button class="slds-button slds-button--brand slds-size--1-of-1 slds-m-top--small remove-margin-left" id="editForm" onclick="editForm();">{!$Label.ChatPageEditFormBtn}</button>
                            <button class="slds-button slds-button--brand slds-size--1-of-1 slds-m-top--small remove-margin-left" id="closeFormOptions" onclick="closeformOptions()">{!$Label.BulkCancelButton}</button>
                        </div>
                    </div>
                </div>
            </div>
            <div id="tooltipWrapper"></div>
        </div>
    </div>

    <!-- to change to remote actions -->
            <apex:form style="display: none;">
                <apex:actionFunction name="getCurrentConversationHeaderList"
                    action="{!getCurrentConversationHeaderList}"
                    rerender="hiddenoptxtLTChat"
                    oncomplete="LiveTextChat.LT.persistObjectLinkingOnRefresh();"
                    />
                <apex:actionFunction name="initConversation"
                    action="{!InitializeConversation}"
                    oncomplete="setBaseValues();"
                    rerender="convHeaderStatus,originatingFormattedNumber, userAvatar, dummy">
                    <apex:param name="parm1" assignTo="{!conversationRecordId}" value="" />
                    <apex:param name="parm2" assignTo="{!originatingNumber}" value="" />
                    <apex:param name="parm3" assignTo="{!convoTypeParam}" value="" />
                    <apex:param name="parm4" assignTo="{!phoneType}" value="" />
                    <apex:param name="parm5" assignTo="{!oid}" value="" />
                    <apex:param name="parm6" assignTo="{!objectPrefix}" value="" />
                    <apex:param name="parm7" assignTo="{!orginatingObjectId}" value="" />
                    <apex:param name="parm8" assignTo="{!socialPersonaId}" value="" />
                </apex:actionFunction>
                <apex:actionFunction name="_reloadConversationFromServer"
                    action="{!ReloadConversation}"
                    oncomplete="onReloadConversationFromServerComplete();"
                    rerender="hiddeninitialmessage">
                    <apex:param name="param1" assignTo="{!conversationRecordId}" value="" />
                </apex:actionFunction>
                <apex:actionFunction name="_endChatAction"
                    action="{!endChat}"
                    oncomplete="performAfterEndChat();"
                    rerender="dummy, lt_pageMessages, convHeaderStatus"
                    timeout="120000">
                    <apex:param name="param1" assignTo="{!conversationRecordId}" value="" />
                    <apex:param name="param2" assignTo="{!sendEndMessage}" value=""/>
                </apex:actionFunction>
                <apex:actionFunction name="showTimeoutErrorMsg" action="{!showTimeoutErrorMsg}" reRender="lt_pageMessages" onComplete="enableEndSessionButton(false)">
                </apex:actionFunction>
                <apex:outputPanel id="dummy">
                    <apex:outputText id="originatingNumber"
                        value="{!originatingNumber}" styleClass="display_none"/>
                    <apex:outputText id="hiddenoptxtLTChat"  styleClass="display_none"
                        value="{!ConversationHeaderRecords}"  />
                    <apex:outputText id="hiddenconvtype" value="{!conversationType}"
                        styleClass="display_none" />
                    <apex:outputText id="hiddeninitialmessage"
                        value="{!initialMessage}" styleClass="display_none" />
                    <apex:outputText id="hiddenobjectname"
                        value="{!objectName}" styleClass="display_none" />
                    <apex:outputText id="hiddenmasterobjectname"
                        value="{!masterObjectName}" styleClass="display_none" />
                    <apex:outputText id="hiddenChannels"
                        value="{!MyPhoneNumbers}" styleClass="display_none" />
                    <apex:outputText id="hiddenconversationRecordId"
                        value="{!conversationRecordId}" styleClass="display_none" />
                    <apex:outputText id="hiddenisconversationinqueue"
                        value="{!isConversationInQueue}" styleClass="display_none" />
                </apex:outputPanel>
                <apex:inputHidden value="{!convHeaderStatus}" id="convHeaderStatus" />
                <apex:outputPanel id="userAvatar">
                    <img id="userAvatarImg" style="display: none" src="{!userAvatar}"/>
                    <apex:outputText value="{!unNormalizedOriginatingNumber}" id="recipientIdNonText"/>
                </apex:outputPanel>
            </apex:form>
    <!-- /change to remote actions -->


    <!-- popover -->
    <div id="popoverContent" style="display: none; position: absolute;" class="live-text">
        <div class="slds-popover slds-nubbin--left-top" style="width: auto; padding: 0.5rem">
            <table class="slds-table slds-scrollable--y">
                <tbody>
                    <apex:repeat value="{!customObjectsForManualLinking}" var="element">
                        <apex:outputPanel rendered="{!element.rendered}" layout="none">
                            <tr id="{!element.recordType}" onclick="openLookup('{!element.lookUpUrl}', '{!element.recordLabel} {!$Label.SearchLblSimple}');" style="cursor: pointer;">
                                <td class="small-padding">
                                    <img src="{!IF(element.iconUrl='',URLFOR($Resource.LiveText, '/images/LTicon32.png') , element.iconUrl)}" class="fixed-size-icon" id="classicIcon{!element.recordType}"  onerror="console.log('error');" />
                                    <span class="fixed-size-icon slds-icon_container slds-icon-standard-{!IF(element.recordType='Order',LOWER(element.recordType)+'s',IF(element.recordType='Product2','product',IF(element.recordType='Pricebook2','pricebook',
                                    LOWER(element.recordType))))}" id="sldsIcon{!element.recordType}">
                                        <svg class="slds-icon" aria-hidden="true">
                                            <use xmlns:xlink="http://www.w3.org/1999/xlink" xlink:href="{!URLFOR($Resource.SLDS202, 'assets/icons/standard-sprite/svg/symbols.svg#'+IF(element.recordType='Order',LOWER(element.recordType)+'s',IF(element.recordType='Product2','product',IF(element.recordType='Pricebook2','pricebook',IF(element.recordType='Asset','product',LOWER(element.recordType))))))}"></use>
                                        </svg>
                                    </span>
                                </td>
                                <td class="small-padding">
                                    <label style="font-size: 13px; font-weight: bold;">{!element.recordLabel}</label>
                                </td>
                                <td class="small-padding">
                                    <span class="slds-icon_container slds-icon-svg--default" id="{!element.recordType}Search">
                                        <svg aria-hidden="true" class="slds-icon slds-icon-text-default slds-icon--x-small">
                                            <use xlink:href="{!URLFOR($Resource.SLDS202, 'assets/icons/utility-sprite/svg/symbols.svg#search')}"></use>
                                        </svg>
                                    </span>
                                </td>
                            </tr>
                            <tr>
                                <td class="small-padding row-indicator" style="text-align: center;">
                                    <div class="slds-form-element">
                                        <div class="slds-form-element__control">
                                            <label class="slds-checkbox" id="{!element.recordType}CheckBoxLabel">
                                                <input type="checkbox" id="{!element.recordType}CheckBox" onclick="fireLinkingEvent(this);"/>
                                                <span class="slds-checkbox--faux" style="margin-right: 0px;"></span>
                                            </label>
                                        </div>
                                    </div>
                                </td>
                                <td colspan="2" class="small-padding row-indicator">
                                    <span id="{!element.recordType}LookupText">{!$Label.NoOpenObjectsPopoverLbl} {!element.recordLabelPlural}</span>
                                </td>
                            </tr>
                        </apex:outputPanel>
                        <script>

                        if('{!element.recordType}'.endsWith('__c')){
                            j$('#sldsIcon{!element.recordType}').hide();
                        }else{
                            j$('#classicIcon{!element.recordType}').hide();
                        }
                        if({!element.isLinked}){
                            j$('#{!element.recordType}CheckBoxLabel').show();
                            j$('#{!element.recordType}CheckBox').attr('checked', 'checked')
                            j$('#{!element.recordType}LookupText').text('{!element.recordName}');
                        }else{
                            j$('#{!element.recordType}CheckBoxLabel').hide();
                        }
                        if('{!element.recordType}' == 'Asset'){
                            j$('#sldsIcon{!element.recordType}').css('background-color',' #317992');
                        }

                        </script>
                    </apex:repeat>
                </tbody>
            </table>
        </div>
    </div>
    <div class="lookup_div" id="lookup">
        <apex:repeat value="{!customObjectsForManualLinking}" var="element">
            <input type="hidden" name="{!element.recordType}Id_hidden" id="{!element.recordType}Id_hidden" value="{!element.recordId}"/>
            <input type="hidden" name="{!element.recordType}Name_hidden" id="{!element.recordType}Name_hidden" value="{!element.recordName}"/>
        </apex:repeat>
    </div>
    <!-- /popover -->

    <!-- addForm popover -->
    <div id="addFormPopover" style="display: none; position: absolute; height: 55%; width: 85%;" class="live-text">
        <div class="slds-popover slds-nubbin--bottom-left" style="width: 100%; padding: 0.5rem;">
            <div class="slds-scrollable--y" id="timeslotsScrollable">
                <div class="slds-grid small-padding" id="formListDiv">
                    <ul id="formsList" class="slds-size--1-of-1 slds-has-dividers--bottom-space">
                    </ul>
                </div>
                <div id="timeslotsDiv" style="display: none;" class="slds-grid">
                    <div class="slds-size--1-of-1">
                        <div id="timeslotsHeightMeter" class="slds-size--1-of-1">
                            <div class="slds-size--1-of-1 slds-form slds-form--compound">
                                <fieldset class="slds-size--1-of-1 slds-form-element slds-p-around--x-small">
                                    <legend class="slds-form-element__label">{!$Label.ChatPageChooseDateLabel}</legend>
                                    <div class="slds-size--1-of-1 slds-form-element__row slds-grid--vertical-align-center">
                                        <div class="slds-size--2-of-5">
                                            <label class="slds-form-element__label">{!$Label.ChatPageDateLabel}</label>
                                        </div>
                                        <div class="slds-size--2-of-5 slds-m-left--xx-small">
                                            <label class="slds-form-element__label">{!$Label.ChatPageTimeLabel}</label>
                                        </div>
                                        <div class="slds-size--1-of-5 slds-m-left--xx-small">

                                        </div>
                                    </div>
                                </fieldset>
                            </div>
                            <ul id="timeslotsList">

                            </ul>
                        </div>
                        <div id="timeslotButton" class="slds-p-around--x-small slds-size--1-of-1" style="position: relative; min-height: 3rem;">
                            <div class="slds-wrap slds-text-align--center slds-size--1-of-1" style="position: absolute; bottom: 0.5rem;">
                                <div id="errorPanel" style="display: none; margin-bottom: 1rem;" class="slds-text-align--left">
                                </div>
                                <div>
                                    <button class="slds-button slds-button--neutral" onclick="timeslotsBack()" id="timeslotBackButton">{!$Label.BulkCancelButton}</button>
                                    <button class="slds-button slds-button--brand" onclick="timeslotsSave()" id="timeslotSaveButton">{!$Label.SaveBtn}</button>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
    <!-- /addForm popover -->

    <script>
    //VARIABLES
    Visualforce.remoting.timeout = 120000;

    // W-5434560 - JSENCODE the labels used in the page
    window.$Label = window.$Label || {};
    $Label.InternationalShortCodeTextingError = '{!JSENCODE($Label.InternationalShortCodeTextingError)}';
    $Label.PhoneIsInvalidError = '{!JSENCODE($Label.PhoneIsInvalidError)}';
    $Label.SendingRequestLbl = '{!JSENCODE($Label.SendingRequestLbl)}'; 
    $Label.ChatPageNoFormsLabel = '{!JSENCODE($Label.ChatPageNoFormsLabel)}';
    $Label.ChatPageFormPreviewSectionTitleLabel = '{!JSENCODE($Label.ChatPageFormPreviewSectionTitleLabel)}';
    $Label.ChatPageDateLabel = '{!JSENCODE($Label.ChatPageDateLabel)}';
    $Label.ChatPageTimeslotsEmptyError = '{!JSENCODE($Label.ChatPageTimeslotsEmptyError)}';
    $Label.ChatPageTimeslotsInvalidDateError = '{!JSENCODE($Label.ChatPageTimeslotsInvalidDateError)}';
    $Label.ChatPageTimeslotsInvalidTimeError = '{!JSENCODE($Label.ChatPageTimeslotsInvalidTimeError)}';
    $Label.ChatPageTimeslotsInThePastError = '{!JSENCODE($Label.ChatPageTimeslotsInThePastError)}';
    $Label.ChatPageTimeslotsDuplicateError = '{!JSENCODE($Label.ChatPageTimeslotsDuplicateError)}';
    $Label.ChatPageTimeslotsNumberError = '{!JSENCODE($Label.ChatPageTimeslotsNumberError)}';
    $Label.ChatPageAddDateAndTimeLabel = '{!JSENCODE($Label.ChatPageAddDateAndTimeLabel)}';
    $Label.ChatPageTimePlaceholderLabel = '{!JSENCODE($Label.ChatPageTimePlaceholderLabel)}';
    $Label.ChatPageTimeLabel = '{!JSENCODE($Label.ChatPageTimeLabel)}';
    $Label.ErrorLabel = '{!JSENCODE($Label.ErrorLabel)}';
    $Label.PhoneNoLengthMsg = '{!JSENCODE($Label.PhoneNoLengthMsg)}';
    $Label.ChatEndByCustomerLbl = '{!JSENCODE($Label.ChatEndByCustomerLbl)}';
    $Label.ChatPageSubtabForImageOpenLbl = '{!JSENCODE($Label.ChatPageSubtabForImageOpenLbl)}';
    $Label.UnsupportedFileFormatMMS = '{!JSENCODE($Label.UnsupportedFileFormatMMS)}';
    $Label.ChatPageMMSSentLbl = '{!JSENCODE($Label.ChatPageMMSSentLbl)}';
    $Label.SMSNotDeliveredLbl = '{!JSENCODE($Label.SMSNotDeliveredLbl)}';
    $Label.ChatPageImageToLargePrefix = '{!JSENCODE($Label.ChatPageImageToLargePrefix)}';
    $Label.ChatPageImageToLargeSuffix = '{!JSENCODE($Label.ChatPageImageToLargeSuffix)}';
    $Label.ChatPageImageToLargeLbl = '{!JSENCODE($Label.ChatPageImageToLargeLbl)}';
    $Label.EndStatus = '{!JSENCODE($Label.EndStatus)}';
    $Label.EndedChatSendMsgPlaceholderLbl = '{!JSENCODE($Label.EndedChatSendMsgPlaceholderLbl)}';
    $Label.ActiveStatus = '{!JSENCODE($Label.ActiveStatus)}';
    $Label.ChatPageMaxCharsAllowedLbl = '{!JSENCODE($Label.ChatPageMaxCharsAllowedLbl)}';
    $Label.OutboundStatus = '{!JSENCODE($Label.OutboundStatus)}';
    $Label.InboundStatus = '{!JSENCODE($Label.InboundStatus)}';
    $Label.EndedChatSendMsgError = '{!JSENCODE($Label.EndedChatSendMsgError)}';
    $Label.TXT_OPT_Messaging = '{!JSENCODE($Label.TXT_OPT_Messaging)}';

    var acceptedError = false;
    var maxStringSize = 6000000;
    var maxFileSize = 2100000; // 2 mb plus small buffer

    var sentMMSText = '';
    var currentTabId;
    var currentSubTabId;
    var focusedSubTabId = null;
    var objectId = '';
    var objectPrefix = null;
    var locale = 'en_US';
    var agentLocale = 'US';
    var isPhoneInvalid = true;
    var socialPersonaData;

    var newSubTabsMap = {};
    var primaryTabId = null;
    var startPollingSubTab = null;
    var username = '{!JSENCODE(userName)}';
    var initialMessage = '{!JSENCODE(initialMessage)}';
    var namespace = '{!JSENCODE(nameSpace)}';
    var source = namespace + '{!JSENCODE(source)}';

    var fldRecipientLabel = namespace + 'Formatted_Originating_Number__c';
    var fldMessage = namespace + 'Message__c';
    var fldStatus = namespace + 'Status__c';
    var fldConversationType = namespace + 'ConversationType__c';
    var fldSource = namespace + 'Source__c';
    var fldOriginTimestamp = namespace + 'OriginTimestamp__c';
    var fldName = 'Name';
    var fldId = 'Id';
    var fldChannelType = namespace + 'Channel_Type__c';
    var fldConvHeader = namespace + 'Conversation_Header__c';
    var fldSentToCustomer = namespace + 'Sent_To_Customer__c';
    var fldErrorCode = namespace + 'Error_Code__c'
    var fldErrorSubCode = namespace + 'Error_Sub_Code__c'
    //forms
    var fldFormIsStatic = namespace + 'Is_Static__c';
    var fldFormJSON = namespace + 'Form_JSON__c';

    //conversation events
    var typingStart = '{!JSENCODE(start_typing)}';
    var typingStop = '{!JSENCODE(stop_typing)}';
    var closeConversation = '{!JSENCODE(end_conversation)}';

    var liveText = '{!JSENCODE(liveText)}';
    var conversationEventMessage = '{!JSENCODE(conversationEventMessage)}';
    var currentConversationRecordId = null;
    var originalPhoneNumber = null;
    var isFirstOutboundMessage = false;
    var ConversationInitialization;
    var MessagePayload;
    var sendingRequestMessage = $Label.SendingRequestLbl;
    var conversationRecords = null;

    var chatMsgCounter = 0;
    var casePrefixURL = '{!casePrefixURL}';
    var opportunityPrefixURL = '{!opportunityPrefixURL}';
    var afterEnter = false;
    var convHeaderStatus;
    var conversationShouldTurnRedMap = new Object();
    var conversationAlertOn = false;
    var conversationTimer = null;

    var conversationLoadError = false;
    var ContactId = null;
    var AccountId = null;

    var sessionTimeoutOccured = false;
    var customLookup;
    var newCaseAfterAutolinking = true;
    var typingTimeout = null;

    //channels
    var textChannel = '{!textChannelType}';
    var facebookChannel = '{!facebookChannelType}';
    var appleChannel = '{!appleChannelType}';

    //objectMetaData
    var objectInformationForLinking = {!customObjectsForManualLinkingString};

    //message order
    var lastMessageTimestamp = 0;
    var channelsMap;

    //forms
    var formsMap;
    var timeslotNumber = 0;
    var formNumber = 0;
    var formErrortimeout = null;
    var timezoneOffset = '{!timezoneOffset}';
    var currentForm = {};
    var timeEntries = generateTimePicklistEntries();
    var canAttachFormHideEvent = true;

    var timeslotRegEx = /\b(((([1-9])|(1[0-2]))|(0[1-9])):([0-5])([0-9])\s?(A|P|a|p)(M|m))\b/i;

    svg4everybody();

     //POPOVER
    function setPopoverPosition(){
        var position = j$('#popoverTrigger').position();
        var popover = j$('#popoverContent');
        //var topOffset = position.top + j$('#popoverTrigger').outerHeight() + 10;
        var topOffset = position.top - j$('#popoverTrigger').outerHeight() - 8;
        //right
        //var leftOffset = position.left - popover.width() + (j$('#popoverTrigger').outerWidth()*1.5);
        //left
        //var leftOffset = position.left - (j$('#popoverTrigger').outerWidth()/2);
        var leftOffset = position.left + j$('#popoverTrigger').outerWidth() + 12;
        popover.css("left", leftOffset);
        popover.css("top", topOffset);
    }//end of setPopoverPosition

    function setAddFormPopoverPosition(){
        var position = j$('#addForm').position();
        var popover = j$('#addFormPopover');
        j$('#timeslotsScrollable').outerHeight(popover.outerHeight() - 16);
        j$('#timeslotButton').outerHeight(j$('#timeslotsScrollable').outerHeight() - j$('#timeslotsHeightMeter').outerHeight());
        var topOffset = position.top - popover.outerHeight() - 16;
        var leftOffset = position.left - j$('#addForm').outerWidth()/2;
        popover.css("left", leftOffset);
        popover.css("top", topOffset);
    }//end of setRealNamePopoverPosition

    function disablePopover(){
        disableElement(j$('#popoverTrigger'));
        j$('#popoverTrigger').prop('onclick', null).off('click');

        enableLinkingOnDetail(false);
    }

    function enablePopover(){
        enableElement(j$('#popoverTrigger'));
        j$('#popoverTrigger').prop('onclick', null).off('click');
        j$('#popoverTrigger').click(function(){
            setPopoverPosition();
            j$('#popoverContent').toggle("slow", function(){
                setPopoverPosition();
            });
        });

        enableLinkingOnDetail(true);

    }//end of enablePopover

    function disableSendFormButton(){
        disableElement(j$('#sendForm'));
    }//end of disableSendFormButton
    function enableSendFormButton(){
        enableElement(j$('#sendForm'));
    }//end of disableSendFormButton

    function disableAddFormPopover(){
        disableElement(j$('#addForm'));
        j$('#addForm').prop('onclick', null).off('click');
        disableSendFormButton();
    }//end of disableAddFormPopover

    function enableAddFormPopover(){
        enableSendFormButton();
        j$('#addForm').prop('onclick', null).off('click');
        j$('#addForm').addClass('pointer').removeClass('cursor-disabled');
        j$('#addForm').click(function(){
            j$('#addFormPopover').toggle("fast", function(){
                setAddFormPopoverPosition();
                if(canAttachFormHideEvent){
                    attachHideClick();
                }
            });
        });
    }//end of enableRealNamePopover

    function attachHideClick(){
        j$('#addFormPopover').on('click', function(e){
            e.stopPropagation();
        });
        j$('#addForm').on('click', function(e){
            e.stopPropagation();
        });
        j$(document.body).on('click.addFormHide', function(){
            j$('#addFormPopover:visible').toggle("fast");
            var $body = j$(this);
            $body.off('click.addFormHide');
            canAttachFormHideEvent = true;
        })
        canAttachFormHideEvent = false;
    }

    function enableLinkingOnDetail(enabled){

    	sforce.console.getEnclosingPrimaryTabId(function(result){
            var message = {};
            message['currentPrimaryTabID'] = result.id;
            message['enabled'] = enabled;
            sforce.console.fireEvent( 'EnableLinkingOnDetail', JSON.stringify(message), function(){} );
        });

    }
    //POPOVER

    function showLoadingProgress(){
        j$('#spinner').show();
    }//end of showLoadingProgress

    function hideLoadingProgress(){
        j$('#spinner').hide();
    }//end of hideLoadingProgress

    function disableElement(element){
        element.prop('disabled', true);
        element.addClass('cursor-disabled');
        element.removeClass('pointer');
    }//end of disableElement

    function enableElement(element){
        element.prop('disabled', false);
        element.removeClass('cursor-disabled');
        element.addClass('pointer');
    }

    function disableAttachButton(){
        j$("#cameraIcon").prop('onclick', null).off('click');
        disableElement(j$("#cameraIcon"));
        j$("#camera").prop('onclick', null).off('click');
        disableElement(j$("#camera"));
    }//end of disableAttachButton
    function enableAttachButton(){
        j$("#cameraIcon").prop('onclick', null).off('click');
        j$('#cameraIcon').click(function(){
            j$('#attachOptionsArea').toggle();
            j$('#textControls').toggle();
        });
        enableElement(j$("#cameraIcon"));
        j$("#camera").prop('onclick', null).off('click');
        j$('#camera').click(function(){
            j$('#attachOptionsArea').toggle();
            j$('#textControls').toggle();
        });
        enableElement(j$("#camera"));
    }//end of enableAttachButton

    function disableSessionActiveElements(){
        disableElement(j$('#supportNumberSelect'));
        disableElement(j$('#recipientInputId'));
        disableElement(j$("#textareaInput"));
        disableEndSessionButton();
        disableSendButton();
        disableAttachButton();
        disablePopover();
        disableAddFormPopover();
    }//end of disableSessionActiveElements

    function enableElementsForActiveSession(){
        enableElement(j$("#textareaInput"));
        enableEndSessionButton(true);
        enableAttachButton();
        enablePopover();
    }//end of enableElementsForActiveSession

    function enableElementsForNewOutboundSession(){
        enableElement(j$("#textareaInput"));
        enableAttachButton();
        enableElement(j$('#recipientInputId'));
        enableElement(j$('#supportNumberSelect'));

        disableEndSessionButton();
        disablePopover();
    }//end of enableElementsForActiveSession

    function disableElementsForActiveSession(){
        disableElement(j$('#supportNumberSelect'));
        disableElement(j$('#recipientInputId'));
    }//end of disableElementsForActiveSession

    function enableElementsForNewSession(){
        enableElement(j$('#supportNumberSelect'));
        enableElement(j$('#recipientInputId'));
        enableElement(j$("#textareaInput"));
    }//end of enableElementsForNewSession

    function disableEndSessionButton(){
        disableElement(j$('#endSessionButton'));
        j$('#endSessionButton').prop('onclick', null).off('click');
        conversationShouldTurnRedMap[currentTabId] = false;
        conversationAlertOn = false;
        clearTimeout(conversationTimer);
        sforce.console.setTabStyle(null, currentTabId);
        sforce.console.setTabTextStyle(null, currentTabId);
        conversationShouldTurnRedMap[currentSubTabId] = false;
        sforce.console.setTabStyle(null, currentSubTabId, null);
        sforce.console.setTabTextStyle(null, currentSubTabId, null);
    }//disableEndSessionButton

    function enableEndSessionButton(sendMessage){
        enableElement(j$('#endSessionButton'));
        j$('#endSessionButton').prop('onclick', null).off('click');
        j$('#endSessionButton').click(function() {
            disableChatButtons(false);
            hideAttachOptions();
            removeForm();
            endChatAction(currentConversationRecordId, sendMessage);
        });
        lockMainTab();
    }//enableEndSessionButton

    function disableSendButton(){
        disableElement(j$('#sendMessage'));
    }//disableSendButton

    function enableSendButton(){
        enableElement(j$('#sendMessage'));
    }//enableSendButton

    function disableTextAreaWithText(text){
        j$("#textareaInput").attr('disabled', 'disabled');
        j$("#textareaInput").attr('placeholder', text);
        LiveTextChat.LT.resetCount();
    }//end of disableTextAreaWithText

    function addError(parentElement, errorPlaceholder, message){
        parentElement.addClass('slds-has-error');
        errorPlaceholder.text(message);
        errorPlaceholder.parent().show();
    }//addError
    function removeError(parentElement, errorPlaceholder){
        parentElement.removeClass('slds-has-error');
        errorPlaceholder.parent().hide();
    }//addError

    function removeErrorOriginatingPhone(){
        removeError(j$('#recipientInputWrapper'), j$('#recipientErrorMessage'));
    }//removeErrorOriginatingPhone
    function addErrorOriginatingPhone(message){
        addError(j$('#recipientInputWrapper'), j$('#recipientErrorMessage'), message);
    }//removeErrorOriginatingPhone

    //ABC
    function setFormPicklistValues(channelId){
        Visualforce.remoting.Manager.invokeAction(
            '{!$RemoteAction.LiveTextChatController.getStructuredForms}',
            getActiveChannelId(),
            function(result, event){
                if(result){
                    j$('#formsList').empty();
                    formsMap = result;
                    for(var key in formsMap){
                        if(formsMap.hasOwnProperty(key)){
                            j$('#formsList').append(
                                '<li class="slds-item slds-truncate pointer" title="'+LiveTextChat.LT.escapeHtml(formsMap[key][fldName])+'" onclick="selectForm(\''+key+'\')">'+
                                    LiveTextChat.LT.escapeHtml(formsMap[key][fldName]) +
                                '</li>'
                            );
                        }
                    }

                    if(j$('#formsList').children().length == 0){
                        j$('#formsList').append(
                            '<li class="slds-item slds-truncate pointer" title="' + $Label.ChatPageNoFormsLabel + '">' +
                                $Label.ChatPageNoFormsLabel +
                            '</li>'
                        );
                    }

                    if(!isEndedConversation()){
                        enableAddFormPopover();
                    }
                }
            }, { buffer: false, escape: false, timeout: 120000 }) ;
    }//end of setFormPicklistValues

    function selectForm(formId){
        if(formsMap.hasOwnProperty(formId)){
            currentForm['name'] = LiveTextChat.LT.escapeHtml(formsMap[formId][fldName]);
            currentForm['id'] = formId;
            currentForm['form'] = JSON.parse(LiveTextChat.LT.unescapeHtml(formsMap[formId][fldFormJSON]));
            currentForm['isStatic'] = formsMap[formId][fldFormIsStatic];
            if(formsMap[formId][fldFormIsStatic] == 'true' || formsMap[formId][fldFormIsStatic] === true){
                displayFormPreview(currentForm);
            }else{
                prepareTimeslots(currentForm, formId);
            }
        }
    }

    function formPreviewHide(){
        j$('#formOutput').empty();
        j$('#formOutput').parent().css('height', '100%');
        j$('#conversationFormControls').css('height', '0%').hide();
        j$('#conversationTextControls').show();
    }
    function formPreviewShow(){
        j$('#conversationFormControls').css('height', '35%');
        var formPreviewHeight = j$('#conversationFormControls').outerHeight() - j$('#endSessionButton').outerHeight(true) - Math.ceil(4*(parseInt(j$('#conversationFormControls').css('padding-top'))));
        j$('#formOutput').parent().css('height', formPreviewHeight);
        j$('#conversationTextControls').hide();
        j$('#conversationFormControls').show();
    }

    function displayFormPreview(formObject){
        j$('#addFormPopover').toggle('fast');
        j$(document.body).off('click.addFormHide');
        var formText = '';
        formText += '<div class="form">'+formObject['name'] + '<br/>';
        formText += formObject['form']['interactiveData']['receivedMessage']['title'] + ': <br/>';
        if(formObject['isStatic'] == 'true' || formObject['isStatic'] == true){
            formText += getTextFromItemsStatic(formObject['form']['interactiveData']['data']['listPicker']['sections']);
        }else{
            formText += getTextfromItemsDynamic(formObject['form']['interactiveData']['data']['event']['timeslots']);
        }
        formText += '</div>';
        j$('#formOutput').append(generateMessageToAppend(formText, username, 'agent', new Date().getTime(), 'form-msg', null));
        currentForm['textPreview'] = formText;
        formPreviewShow();
    }

    function formPreviewClick(){
        canAttachFormHideEvent = true;
        j$('#formPreview').hide();
        j$('#addFormOptions').show();
        if(currentForm['isStatic'] == true || currentForm['isStatic'] == 'true'){
            j$('#editForm').hide();
        }else{
            j$('#editForm').show();
        }
    }
    function closeformOptions(){
        j$('#addFormOptions').hide();
        j$('#formPreview').show();
    }
    function editForm(){
        closeformOptions();
        formPreviewHide();
        j$('#addForm').click();
    }
    function removeForm(){
        closeformOptions();
        formPreviewHide();
        timeslotsBack();
        currentForm = {};
    }

    function getTextfromItemsDynamic(itemsObject){
        var ret = $Label.ChatPageFormPreviewSectionTitleLabel.replace('{0}', $Label.ChatPageDateLabel.toLowerCase());
        for (var i = 0; i < itemsObject.length; i++) {
            var mom = moment(itemsObject[i]['startTime']).utcOffset(timezoneOffset);
            ret += mom.format("dddd, MMMM Do YYYY") + '<br/>' + mom.format('h:mm a') + '<br/><br/>';
        }
        return ret;
    }

    function getTextFromItemsStatic(itemsObject){
        var ret = '';
        for (var i = 0; i < itemsObject.length; i++) {
            if(itemsObject[i].hasOwnProperty('items')){
                ret += $Label.ChatPageFormPreviewSectionTitleLabel.replace('{0}', itemsObject[i]['title']);
                ret += getTextFromItemsStatic(itemsObject[i]['items']);
            }else{
                ret += itemsObject[i]['title'] + '<br/><br/>';
            }
        }
        return ret;
    }

    function timeslotsBack(){
        j$('#formListDiv').show();
        j$('#timeslotsDiv').hide();
        setAddFormPopoverPosition();
    }

    function timeslotsSave(){
        clearTimeout(formErrortimeout);
        j$('#errorPanel').empty();
        var timeslots = [];
        var hasError = false;
        var timeArray = [];
        var showDuplicateError = false;
        var showEmptyTimeslotError = false;
        var showPastTimeslotError = false;
        var showIncorectTimeError = false;
        var showIncorectDateError = false;
        j$('#timeslotsList .timeslotElement').each(function(){
            var datetimeString = '';
            var emptyTimeslotError = false;
            var emptyDateError = false;
            var incorectTimeError = false;
            var incorectDateError = false;
            j$(this).find("input").each(function(){
                if(j$(this).hasClass('dateinput')){
                    if(j$(this).val() == '' || j$(this).val() === undefined || j$(this).val() == null){
                        emptyDateError = true;
                    }else{
                        var dateMatch = j$(this).val().match(/(0[1-9]|1[012])[/](0[1-9]|[12][0-9]|3[01])[/](19|20)\d\d/);
                        if(dateMatch != null){
                            datetimeString += dateMatch[0];
                        }else{
                            incorectDateError = true;
                        }
                    }
                }else if(j$(this).hasClass('timeinput')){
                    var timevalue = j$(this).lookup('getSelection');
                    if(timevalue == null){
                        if(j$(this).val() == '' || j$(this).val() === undefined || j$(this).val() == null){
                            emptyTimeslotError = true;
                        }else{
                            var match = j$(this).val().match(timeslotRegEx);
                            if(match != null){
                                datetimeString += ' ' + match[0];
                            }else{
                                incorectTimeError = true;
                            }
                        }
                    }else{
                        datetimeString +=  ' '+ timevalue['id'];
                    }
                }
            })
            datetimeString += ' '+timezoneOffset;
            //timeslot in users local time
            var timeslotDateTime = moment(datetimeString, 'MM/DD/YYYY HH:mm a Z').utcOffset(timezoneOffset);
            //timeslot in utc
            timeslotDateTime.utc();
            timeArray.push(timeslotDateTime.format('YYYY-MM-DDTHH:mmZZ'));
            timeslots.push(createTimeslotObject(timeslotDateTime.format('YYYY-MM-DDTHH:mmZZ')));
            if(emptyTimeslotError || emptyDateError){
                j$(this).addClass('slds-has-error');
                showEmptyTimeslotError = true;
                hasError = true;
            }else if(incorectDateError){
                j$(this).addClass('slds-has-error');
                showIncorectDateError = true;
                hasError = true;
            }else if(incorectTimeError){
                j$(this).addClass('slds-has-error');
                showIncorectTimeError = true;
                hasError = true;
            }else if(moment().valueOf() > timeslotDateTime.valueOf()){
                j$(this).addClass('slds-has-error');
                showPastTimeslotError = true;
                hasError = true;
            }else if(isDuplicate(timeArray, timeslotDateTime.format())){
                j$(this).addClass('slds-has-error');
                showDuplicateError = true;
                hasError = true;
            }else{
                j$(this).removeClass('slds-has-error');
            }
        })
        timeslotNumber = 0;
        if(!hasError){
            currentForm['form']['interactiveData']['data']['event']['timeslots'] = timeslots;
            displayFormPreview(currentForm)
        }else{
            if(showEmptyTimeslotError){
                displayTimeslotError($Label.ChatPageTimeslotsEmptyError);
            }
            if(showIncorectDateError){
                displayTimeslotError($Label.ChatPageTimeslotsInvalidDateError);
            }
            if(showIncorectTimeError){
                displayTimeslotError($Label.ChatPageTimeslotsInvalidTimeError);
            }
            if(showPastTimeslotError){
                displayTimeslotError($Label.ChatPageTimeslotsInThePastError);
            }
            if(showDuplicateError){
                displayTimeslotError($Label.ChatPageTimeslotsDuplicateError);
            }
        }
    }

    function isDuplicate(timeArray, item){
        return timeArray.some(function(item, idx){
            return timeArray.indexOf(item) != idx;
        })
    }

    function createTimeslotObject(timedateInUtc){
        var timeslot = {};
        timeslot['duration'] = 3600;
        timeslot['identifier'] = timeslotNumber++;
        timeslot['startTime'] = timedateInUtc;
        return timeslot;
    }

    function countTimeslots(){
        return j$('#timeslotsList').children().length;
    }

    function prepareTimeslots(formObject, formId){
        var timeslots;
        timeslots = formObject['form']['interactiveData']['data']['event']['timeslots'];
        j$('#timeslotsList').empty();
        var showError = false;
        for(var i = 0; i < timeslots.length; i++ ){
            if(countTimeslots() != 11 && !showError){
                var timeslotDateTime = moment(timeslots[i]['startTime']).utcOffset(timezoneOffset);
                createTimeslotElement(timeslotDateTime, formNumber++, 0);
            }else{
                showError = true;
                removeAddFormButton();
            }
        }
        if(showError){
            displayTimeslotError($Label.ChatPageTimeslotsNumberError);
        }
        if(countTimeslots()==0){
            createTimeslotElement(moment().utcOffset(timezoneOffset), formNumber++, 200);
            j$('.delete_timeslot').prop('disabled', true);
        }
        j$('#formListDiv').hide();
        j$('#timeslotsDiv').show();
        setAddFormPopoverPosition();
    }

    function removeAddFormButton(){
        j$('#addTimeslotIcon button').prop('disabled', true);
    }

    function showAddFormButton(){
        j$('#addTimeslotIcon').remove();
        var content =   '<li id="addTimeslotIcon" class="slds-p-around--x-small">'+
                            '<div class="slds-form-element__row">'+
                                '<div class="slds-form-element">'+
                                    '<div class="slds-form-element__control ">'+
                                        '<button class="slds-icon_container slds-button slds-button--neutral" onclick="addTimeslot()">'+
                                            '<svg class="slds-button__icon slds-button__icon--left">'+
                                                '<use xmlns:xlink="http://www.w3.org/1999/xlink" xlink:href="{!URLFOR($Resource.SLDS202, '/assets/icons/utility-sprite/svg/symbols.svg#add')}"></use>'+
                                            '</svg>'+
                                            $Label.ChatPageAddDateAndTimeLabel +
                                        '</button>'+
                                '</div>'+
                            '</div>'+
                        '</li>';
        j$('#timeslotsList').append(content);
    }

    function createTimeslotElement(date, i, scrollTime){
        var timeslotsList = j$('#timeslotsList');
        var elemId = 'date_timeslot_'+i;
        var timeElemId = 'input_time_timeslot_'+i;
        var content =   '<li class="slds-p-around--x-small timeslotElement" id="'+elemId+'">'+
                            '<div class="slds-form slds-form--compound">'+
                                '<fieldset class="slds-form-element">'+
                                    '<div class="slds-form-element__row slds-grid--vertical-align-center">'+
                                        '<div class="slds-size--5-of-12">'+
                                            '<div class="slds-form-element__control slds-input-has-icon slds-input-has-icon--right">'+
                                                '<svg class="slds-input__icon slds-icon-text-default" aria-hidden=true>'+
                                                    '<use xmlns:xlink="http://www.w3.org/1999/xlink" xlink:href="{!URLFOR($Resource.SLDS202, '/assets/icons/utility-sprite/svg/symbols.svg#event')}"></use>'+
                                                '</svg>'+
                                                '<input id="input_'+elemId+'" type="text" class="dateinput slds-input datepicker_class" >'+
                                                '</input>'+
                                            '</div>'+
                                        '</div>'+
                                        '<div class="slds-size--5-of-12 slds-m-left--xx-small">'+
                                            '<div class="slds-form-element slds-lookup" data-select="single" data-scope="single">'+
                                                '<div class="slds-form-element__control slds-input-has-icon slds-input-has-icon--right">'+
                                                    '<svg aria-hidden="true" class="slds-input__icon slds-icon-text-default">'+
                                                        '<use xmlns:xlink="http://www.w3.org/1999/xlink" xlink:href="{!URLFOR($Resource.SLDS202, '/assets/icons/utility-sprite/svg/symbols.svg#clock')}"></use>'+
                                                    '</svg>'+
                                                    '<input id="'+timeElemId+'" class="timeinput slds-lookup__search-input slds-input" type="text" aria-autocomplete="list" role="combobox" aria-expanded="false" aria-activedescendant="" placeholder="' + $Label.ChatPageTimePlaceholderLabel + '">'+
                                                '</div>'+
                                            '</div>'+
                                        '</div>'+
                                        '<div class="slds-size--2-of-12 slds-m-left--xx-small">'+
                                            '<div class="slds-form-element">'+
                                                '<div class="slds-form-element__control slds-align--absolute-center">'+
                                                    '<button class="slds-icon_container slds-button--icon slds-button--icon-border-filled slds-button delete_timeslot" onclick="removeTimeslot(\''+elemId+'\')">'+
                                                        '<svg class="slds-button__icon slds-icon--x-small">'+
                                                            '<use xmlns:xlink="http://www.w3.org/1999/xlink" xlink:href="{!URLFOR($Resource.SLDS202, '/assets/icons/utility-sprite/svg/symbols.svg#delete')}"></use>'+
                                                        '</svg>'+
                                                    '</button>'+
                                                '</div>'+
                                            '</div>'+
                                        '</div>'
                                    '</div>'+
                                '</fieldset>'+
                            '</div>'+
                        '</li>';
        timeslotsList.append(content);
        var timeSelection = {};
        if(!date){
            date = moment().utcOffset(timezoneOffset)
            timeSelection = null;
        }else{
            timeSelection['id'] = date.format('h:mm a');
            timeSelection['label'] = date.format('h:mm a');
        }
        j$('#'+timeElemId).lookup({
            items: timeEntries,
            showSearch: false,
            recentLabel: '',
            useImgTag: false,
            objectLabel: $Label.ChatPageTimeLabel,
            objectPluralLabel: $Label.ChatPageTimeLabel,
            objectIconUrl: "{!URLFOR($Resource.SLDS202, '/assets/icons/utility-sprite/svg/symbols.svg#clock')}",
            objectIconClass: 'utility-icon',
            assetsLocation: '{!URLFOR($Resource.SLDS202)}',
            initialSelection: timeSelection
        });

        j$('#'+timeElemId).focusout(function(){
             j$(this).parents("li").removeClass('slds-has-error');
             clearTimeout(formErrortimeout);
             j$('#errorPanel').empty();
             if(j$(this).lookup('getSelection') == null){
                 var tempTime = j$(this).val();
                 if(tempTime == '' || tempTime === undefined || tempTime == null){
                     emptyTimeslotError = true;
                 }else{
                     var match = tempTime.match(timeslotRegEx);
                     if(match != null){
                         tempTime = tempTime.replace(/[APap]/, " $&");
                         j$(this).lookup('setSelection', {id: tempTime, label: tempTime});
                     }
                 }
             }
         });

        j$('#input_date_timeslot_'+i).datepicker({
            numYearsBefore: 0,
            numYearsAfter: 10,
            format: 'MM/DD/YYYY',
            initDate: date,
            assetsLocation: '{!URLFOR($Resource.SLDS202)}',
            closeElement: j$('#addFormPopover')
        });
        j$('#time-picklist-'+i).picklist();
        j$('#timeslotsScrollable').animate({'scrollTop' : j$('#timeslotsScrollable').prop("scrollHeight")}, scrollTime);
        showAddFormButton();
    }

    function generateTimePicklistEntries(){
        var items = [];
        for(var k =0; k<2; k++){
            var ampm = k==0 ? 'am' : 'pm';
            for (var i=1; i<13; i++) {
                for(var j=0; j<4; j++){
                    var mins = j==0 ? '00' : j*15;
                    var item = {};
                    item['id'] = i + ':' + mins + ' ' + ampm;
                    item['label'] = i + ':' + mins + ' ' + ampm;
                    items.push(item)
                }
            }
        }
        return items;
    }

    function displayTimeslotError(errorMessage){
        clearTimeout(formErrortimeout);
        var markup = '';
        markup += '<div class="slds-box slds-theme--error slds-m-top--x-small slds-media" style="align-items: center;">'+
                    '<span class="slds-icon_container">'+
                        '<svg aria-hidden="true" class="slds-icon slds-icon-x-small slds-media__figure">'+
                            '<use xlink:href="{!URLFOR($Resource.SLDS202, '/assets/icons/utility-sprite/svg/symbols.svg#error')}"></use>'+
                        '</svg>'+
                        '<span class="slds-assistive-text">' + $Label.ErrorLabel + '</span>'+
                    '</span>'+
                    '<span class="slds-media__body" id="titleErrorPanel">'+errorMessage+'</span>'+
                '</div>';
        j$('#errorPanel').append(markup);
        j$('#errorPanel').fadeIn();
        j$('#timeslotsScrollable').animate({'scrollTop' : j$('#timeslotsScrollable').prop("scrollHeight")}, 200);
        formErrortimeout = setTimeout(function(){
            j$('#errorPanel').fadeOut(function(){
                j$('#errorPanel').empty();
            });
        }, 2000);
    }

    function addTimeslot(){
        if(countTimeslots() < 11){
            createTimeslotElement(null, formNumber++, 200);
            if(j$('#timeslotsList').children().length > 1){
                j$('.delete_timeslot').prop('disabled', false);
            }
            setAddFormPopoverPosition();
            if(countTimeslots() == 11){
                removeAddFormButton();
            }
        }else{
            removeAddFormButton();
            displayTimeslotError($Label.ChatPageTimeslotsNumberError);
        }
    }

    function removeTimeslot(timeslotId){
        j$('#'+timeslotId).remove();
        setAddFormPopoverPosition();
        if(j$('#timeslotsList').children().length == 2){
            j$('.delete_timeslot').prop('disabled', true);
        }
        showAddFormButton();
    }
    //end of ABC

    function isNullOrEmpty(obj){
        return obj == null || obj == 'null' || obj == '';
    }

    function showConnectivityError(){
        sforce.console.fireEvent('ConversationSessionExpired','[]', function(){} );
    }

    var sessionStatusBeforeEnding;
    function endChatAction(conversationId, sendEndMessage){
        try{
            console.log('Chat Page Testing for Sfdc.provide in endChatAction');
            Sfdc.provide("SfdcApp.Visualforce.VSManager",{});
        }
        catch(e){
             console.log('reloadConversationFromServer Error:' +e);
             if(e.message.indexOf('Sfdc.provide is not a function') >= 0){
                 sessionTimeoutOccured = true;
                  showConnectivityError();
                      return;
             }
        }
        sessionStatusBeforeEnding = getConvHeaderStatus();
        _endChatAction(conversationId, sendEndMessage);
    }

    //this function returns phone in national/international format (for valid phones) - only for outbound conversation
    function phoneFormatter(phone, locale){
        removeErrorOriginatingPhone();
        var phoneStartsWithPlus = false;
        if(!phone){
            isPhoneInvalid = true;
            return null;
        }
        if(socialPersonaData){
            isPhoneInvalid = false;
            return socialPersonaData['RealName'];
        }
        if(phone.startsWith('+'))
            phoneStartsWithPlus = true;
        phone = phone.replace(/\D/g,'');
        if(phone.length < 8 || phone.length > 17){
            addErrorOriginatingPhone($Label.PhoneNoLengthMsg);
            j$('[id$=originatingNumber]').text(phone);
            isPhoneInvalid = true;
            return phone;
        }
        var phoneUtil = i18n.phonenumbers.PhoneNumberUtil.getInstance();
        var userLocale = locale;
        userLocale = userLocale.search("_") ? userLocale.substring(userLocale.lastIndexOf("_")+1) : userLocale;
        var number;
        //if userLocale is US and phone starts with 1 and it's 11 digit long check if adding + will work
        if(userLocale == "US" && phone.length == 11 && phone.startsWith("1") && !phoneStartsWithPlus){
            try{
                number = phoneUtil.parseAndKeepRawInput("+" + phone);
            }catch(err){
                console.log('its not an US number');
            }
        }
        phone = phoneStartsWithPlus ? '+' + phone : phone;
        //adding country code if there is none
        if(!number){
            try{
                number = phoneStartsWithPlus ? phoneUtil.parseAndKeepRawInput(phone) : phoneUtil.parseAndKeepRawInput(phone, userLocale);
            }catch(err){
                j$('[id$=originatingNumber]').text(phone);
                isPhoneInvalid = true;
                return phone;
            }
        }
        var LTphoneNumber = getActiveChannel();
        var LTNumberlocale = "US";
        if(LTphoneNumber.length > 6 ){
            if(!LTphoneNumber.startsWith('+'))
                LTphoneNumber = '+' + LTphoneNumber;
            var LTnumber = phoneUtil.parseAndKeepRawInput(LTphoneNumber);
            LTNumberlocale = phoneUtil.getRegionCodeForNumber(LTnumber)
        }

        if(phoneUtil.isValidNumber(number)){

            var numberLocale = phoneUtil.getRegionCodeForNumber(number);

            isPhoneInvalid = false;

            // Check if the user is attempting to send internationally with a short code
            if(isShortCode(LTphoneNumber) && numberLocale != LTNumberlocale){
                addErrorOriginatingPhone($Label.InternationalShortCodeTextingError);
                isPhoneInvalid = true;
            }

            // Store E164 format of number to use in messaging
            j$('[id$=originatingNumber]').text(phoneUtil.format(number, i18n.phonenumbers.PhoneNumberFormat.E164));

            // Display number in national format if all the following match:
            // The country code of the LiveText number
            // The country code of the Recipient's phone number
            // The country code of the LiveText Agent
            if(numberLocale == LTNumberlocale && numberLocale == agentLocale){
                return phoneUtil.format(number, i18n.phonenumbers.PhoneNumberFormat.NATIONAL);
            }

            // otherwise, display in international format
            return phoneUtil.format(number, i18n.phonenumbers.PhoneNumberFormat.INTERNATIONAL);
        }else{
            console.log('Phone is invalid: ' + phone);
            disableSendButton();
            addErrorOriginatingPhone($Label.PhoneIsInvalidError);
            isPhoneInvalid = true;
            j$('[id$=originatingNumber]').text(phone);
            return phone;
        }
    }

    //this function returns phone in E164 format (for valid phones)
    function phoneE164Formatter(phone){
        if(socialPersonaData){
            isPhoneInvalid = false;
            return socialPersonaData['ExternalId'];
        }
        var phoneUtil = i18n.phonenumbers.PhoneNumberUtil.getInstance();
        var num;
        var phone = phone.replace(/[^0-9\+]/g,'');
        if(!num){
            try{
                num = phoneUtil.parseAndKeepRawInput(phone);
            }catch(err){
                console.log('\'Number\' cannot be created');
                return phone;
            }
        }
        if(phoneUtil.isValidNumber(num)){
            return phoneUtil.format(num, i18n.phonenumbers.PhoneNumberFormat.E164);
        }
        console.log('Phone is not valid');
        return phone;
     }

     //this function returns phone in International format (for valid phones)
     function phoneInternationalFormatter(phone){
        if(socialPersonaData){
            isPhoneInvalid = false;
            return socialPersonaData['ExternalId'];
        }
        var phoneUtil = i18n.phonenumbers.PhoneNumberUtil.getInstance();
        var num;
        if(!phone){
            return getObjectName();
        }
        var phone = phone.replace(/[^0-9\+]/g,'');
        try{
            num = phoneUtil.parseAndKeepRawInput(phone);
        }catch(err){
            console.log('\'Number\' cannot be created');
            return phone;
        }
        if(phoneUtil.isValidNumber(num)){
            return phoneUtil.format(num, i18n.phonenumbers.PhoneNumberFormat.INTERNATIONAL);
        }
        console.log('Phone is not valid');
        return phone;
     }

     function formatDisplayedPhoneField(phoneToFormat){
        //For Inbound text always recipient field should be in International format
        if(getActiveChannelType() == textChannel){
            if(j$('[id$="hiddenconvtype"]').text() != 'Inbound'){
                if(phoneToFormat){
                    j$('#recipientInputId').val(phoneFormatter(phoneToFormat, locale));
                }else{
                    j$('#recipientInputId').val(phoneFormatter(j$('[id$="originatingNumber"]').text(), locale));
                }
            }else{
                j$('#recipientInputId').val(phoneInternationalFormatter(j$('[id$="originatingNumber"]').text()));
            }
        }
     }

    //for forcetk
    var client = new forcetk.Client();
    client.setSessionToken('{!$Api.Session_ID}');

    sforce.SoapTransport.prototype.onFailure = function(res, writer) {
        var resString = JSON.stringify(res);
        var isSessionError = resString.indexOf('Remote invocation failed') >= 0 || resString.indexOf('INVALID_SESSION') >= 0;
        var isInvalidTypeError = resString.indexOf('INVALID_TYPE') >= 0;
        if(isSessionError){
            sessionTimeoutOccured = true;
            showConnectivityError();
            console.log('CHAT PAGE SESSION TIMED OUT DUE TO SoapTransport.prototype.onFailure: ' + resString);
        }else if (!isInvalidTypeError){
            alert("Error: " + res);
        }
    };

    j$(document).ajaxError(function( event, request, settings ) {
        if(!sessionTimeoutOccured){
            console.log('Chat Page Ajax error.');
            if(settings != null && request != null){
                console.log('Chat Page Error requesting ' + settings.url + ': ' + request.status + ' ' + request.statusText);
            }

            var isAjaxDisconnect = (request != null && (request.status == 0 || request.status == 401));
            if(isAjaxDisconnect) {
                sessionTimeoutOccured = sessionTimeoutOccured || request.status == 401;
                if(sessionTimeoutOccured){
                showConnectivityError();
                }
            }
        }
    });

    var originalOnError = Visualforce.remoting.Util.error;
    Visualforce.remoting.Util.error = function(a,b){
        if (b&&(b.message.indexOf('Logged in?')!==-1)){
            sessionTimeoutOccured = true;
             console.log('CHAT PAGE SESSION TIMED OUT DUE TO LOGGED IN ERROR');
            showConnectivityError();
        }else{
            originalOnError && originalOnError(a,b);
        }
    };

    /**
    * This function fills newSubtTabMap key: edit prefix (/000/e - Account) -> subTabId
    */
    <apex:repeat value="{!customObjectKeyPrefixesForEditPages}" var="element">
      newSubTabsMap['{!element}'] = null;
    </apex:repeat>

    /** /
    *    This function sets the contact Name on the New case subtab detail page to the contactID selected from the paper clip.
    **/
    var reloadNewCaseSubTab = function(){
        //move it to different vars and base logic on prefix
        var newCaseSubTabId = newSubTabsMap['/500/e'];
        if(newCaseSubTabId != null){
            var newCaseUrl = casePrefixURL;
            if (ContactId != null)  newCaseUrl += 'cas3_lkid='+ContactId + '&';
            if (AccountId != null)  newCaseUrl += 'cas4_lkid='+AccountId + '&';
            sforce.console.setTabUnsavedChanges(newCaseAfterAutolinking, function(){}, newCaseSubTabId);
            newCaseAfterAutolinking = true;
            sforce.console.openSubtab(primaryTabId,newCaseUrl,false,'New Case',newCaseSubTabId,function(result){
                if (result.success == true) {
                    newCaseSubTabId = result.id;
                    for(var j = 0; j < objectInformationForLinking.length; j++){
                        if(objectInformationForLinking[j]['recordPrefix'] == '500'){
                            var iconUrl = objectInformationForLinking[j]['miniIconUrl'];
                            break;
                        }
                    }
                    sforce.console.setTabIcon(iconUrl,result.id);
                }else{
                    console.log('Failed to set the Contact Name field on the New case subtab');
                }
            });
        }
    };

    /**
    *    This function sets the contact Name on the New case subtab detail page to the contactID selected from the paper clip.
    */
    var reloadNewOpportunitySubTabAccountData = function(){
        var newOppSubTabId = newSubTabsMap['/006/e'];
        if(newOppSubTabId != null){
            if(AccountId != null){
                sforce.console.openSubtab(primaryTabId,opportunityPrefixURL+'accid='+AccountId,false,'New Opportunity',newOppSubTabId,function(result){
                    if(result.success == true){
                        newOppSubTabId = result.id;
                        for(var j = 0; j < objectInformationForLinking.length; j++){
                            if(objectInformationForLinking[j]['recordPrefix'] == '006'){
                                var iconUrl = objectInformationForLinking[j]['miniIconUrl'];
                                break;
                            }
                        }
                        sforce.console.setTabIcon(iconUrl,result.id);
                    }else{
                        console.log('Failed to set the Account Name field on the New opportunity subtab');
                    }
                });
            }
        }
    };

    /**
        * This function gets the pageInfo for the passed tabId argument and checks if it is a new Subtab. If yes it calls the startPollingSubTab method with the tabId as
        *    argument.
        * @param tabId tabdId of the current focused subtab
        * @return No return value.
        */
    function checkPageInfoFuncn(tabId){
        sforce.console.getPageInfo(tabId, function(result){
            var resultObjVariable =  JSON.parse(result.pageInfo);
            var pageUrl = resultObjVariable.url;
            var objectId = resultObjVariable.objectId
            for(var key in newSubTabsMap){
                if (newSubTabsMap.hasOwnProperty(key)) {
                    if(objectId == null && (pageUrl.indexOf(key)!= -1)){
                        newSubTabsMap[key] = tabId;
                        startPollingSubTab(tabId);
                    }
                }
            }
        });
    };

    var getFocusedSubtabFuncn = function(){
        sforce.console.getFocusedSubtabId(function(result){
            focusedSubTabId = result.id;
            checkPageInfoFuncn(focusedSubTabId);
        });
    };

    /**
        * This function loops through the all subTabIds present in the current primary Tab and assigns to the variables
        *    newAccSubTabId and etc..If a subTab already has object created that variable will be null..
        * @param tabId tabdId of the current focused subtab
        * @return No return value.
        */
    function refreshTabIds(callback){
        sforce.console.getEnclosingPrimaryTabId(function(result){
            primaryTabId = result.id;
            sforce.console.getSubtabIds(primaryTabId,function(result){
                var subTabIds = result.ids;
                var x=0;
                var loopArray = function(arr){
                    findNewSubtabID(subTabIds[x],function(){
                        x++;
                        if(x<arr.length){
                            loopArray(arr);
                        }else{
                            callback();
                        }
                    });
                };
                loopArray(subTabIds);
            });
        });
    }

    /**
    *    This is a helper function called by refreshTabIds to refresh the latest values for the variables
    *    newAccSubtab and etc..
    */
    function findNewSubtabID(tempTabId,callback){
        sforce.console.getPageInfo(tempTabId,function(result){
            var resultObjVariable =  JSON.parse(result.pageInfo);
            var pageUrl = resultObjVariable.url;
            var objectId = resultObjVariable.objectId
            for(var key in newSubTabsMap){
                if (newSubTabsMap.hasOwnProperty(key)) {
                     if(objectId == null && (pageUrl.indexOf(key)!= -1)){
                        newSubTabsMap[key] = tempTabId;
                    }
                }
            }
            callback();
        });
    }

    function handleLinkRecordsClicked(obj){
        obj['linked'] = true;
        obj['objectlinkname'] = LiveTextChat.LT.unescapeHtml(obj['objectlinkname']);
        sforce.console.getFocusedPrimaryTabId(function(result){
            obj['currentPrimaryTabID'] = result.id;
            obj['currentConversationRecordId'] = currentConversationRecordId;
            sforce.console.fireEvent('recordLinkedFromChat', JSON.stringify(obj), function(){} );
        });
        var prefix = obj['objectprefix'];
        var id = obj['objectid'];
        if(prefix == '003'){
            ContactId = id;
            refreshTabIds(function(){setTimeout(function(){ContactId = id;}, 500)});
        }else if(prefix == '001'){
            AccountId = id;
            refreshTabIds(function(){setTimeout(function(){AccountId = id;}, 500)});
        }
        if(!isEndedConversation()){
            enableElementsForActiveSession();
        }
    }

    function isEndedConversation(){
        return  getConvHeaderStatus() === 'Ended';
    }

    function reloadAccountDependentSubTabs(){
        reloadNewOpportunitySubTabAccountData();
        reloadNewCaseSubTab();
    }

    function reloadCaseTab(htmlObj){
        var prefix = j$(htmlObj).attr('objectprefix');
        var id = j$(htmlObj).attr('objectid');
        var linked = j$(htmlObj).attr('linked');
        if(prefix == '003'){
            ContactId = linked ? id : null;
            refreshTabIds(reloadNewCaseSubTab);
        }else if(prefix == '001'){
            AccountId = linked ? id : null;
            refreshTabIds(reloadAccountDependentSubTabs);
        }
    }

    function fireLookup(msg){
        customLookup.close();
        var msgObj = JSON.parse(msg);
        sforce.console.getEnclosingPrimaryTabId(function(result){
            msgObj['currentPrimaryTabID'] = result.id;
            msgObj['objectlinkname'] = msgObj['objectlinkname'];
            msgObj['objectplurallabel'] = msgObj['objectplurallabel'];
            msgObj['currentConversationRecordId'] = currentConversationRecordId;
            sforce.console.fireEvent( 'recordLinkedFromChat', JSON.stringify(msgObj), function(){} );
        });
    }


    function getSafeParameterByName(name, search){
        var val = getParameterByName(name, search);
        return (val == null || val == 'null') ? "" : val;
    }

    function getParameterByName(name, search) {
        name = name.replace(/[\[]/, "\\[").replace(/[\]]/, "\\]");
        var regex = new RegExp("[\\?&]" + name + "=([^&#]*)"),
        results = regex.exec(search);
        var ret = results === null ? null : decodeURIComponent(results[1].replace(/\+/g, " "));
        return (ret === 'null') ? null : ret;
    }

    function getUrlParameterNames(url){
        var ix = url.indexOf('?');
        if(ix >= 0){
            url = url.substring(ix+1);
            var pairs = url.split('&');
            var params = [];
            for(var i=0;i<pairs.length;i++){
                params[i] = pairs[i].split('=')[0];
            }
            return params;
        }
        return [];
    }

    function getPrimaryTabDetails(callback){
        sforce.console.getEnclosingPrimaryTabId(function(result) {
            sforce.console.getSubtabIds(result.id , function(result){
                var firstSubTabId = result.ids[0];
                sforce.console.getPageInfo(firstSubTabId , function(result){
                        primaryTabId = result.id;
                        var resultObj =  JSON.parse(result.pageInfo);
                        callback(resultObj);
                });
            });
        });
    }

    function setFocusOnLoad() {
        j$("#textareaInput").attr('autofocus', 'autofocus');
    }

    onload = setFocusOnLoad;

    function getCookie(cname){
        var name = cname + "=";
        var ca = document.cookie.split(';');
        for(var i = 0; i <ca.length; i++){
            var c = ca[i];
            while (c.charAt(0)==' '){
                c = c.substring(1);
            }
            if (c.indexOf(name) == 0){
                return c.substring(name.length,c.length);
            }
        }
        return "";
    }

    function initializeFromPrimaryTab(){
        getPrimaryTabDetails(function(resultObj) {
            var pageUrl = resultObj.url;
            currentConversationRecordId = getParameterByName('cvid', pageUrl);
            objectId = getSafeParameterByName('oid', pageUrl);
            var ownerId = getSafeParameterByName('ownerId', pageUrl);
            var orginatingObjectId = getSafeParameterByName('orginatingObjectId', pageUrl);
            if(!orginatingObjectId){
                orginatingObjectId = objectId;
            }

            var channelId = getSafeParameterByName('channelId', pageUrl);

            var originatingNumber = getSafeParameterByName('phone', pageUrl);
            if (socialPersonaData) {
                originatingNumber = socialPersonaData['ExternalId'];
            }

            j$('[id$=originatingNumber]').text(originatingNumber);

            // first get agent's locale
             Visualforce.remoting.Manager.invokeAction(
                '{!$RemoteAction.LiveTextChatController.getProperLocale}',
                '',
                ownerId,
                function(result, event) {
                    if(result != null){
                        agentLocale = result.search("_") ? result.substring(result.lastIndexOf("_")+1) : result;
                    }
                }
            );

            Visualforce.remoting.Manager.invokeAction(
                '{!$RemoteAction.LiveTextChatController.getProperLocale}',
                objectId,
                ownerId,
                function(result, event) {
                    if(result != null){
                        locale = result;
                    }

                    j$('#recipientInputId').val(phoneInternationalFormatter(getSafeParameterByName('phone', pageUrl)));
                    objectPrefix = getSafeParameterByName('objectprefix', pageUrl);
                    //originatingNumber needs to be E164!!
                    originalPhoneNumber = phoneE164Formatter(getSafeParameterByName('phone', pageUrl));
                    var socialIdToPass = null;
                    if(socialPersonaData){
                        originalPhoneNumber = socialPersonaData['ExternalId'];
                        j$('#recipientInputId').val(originalPhoneNumber);
                        j$('[id$=originatingNumber]').text(originalPhoneNumber);
                        isPhoneInvalid = false;
                        socialIdToPass = socialPersonaData['Id'];
                    }
                    //reload of outbound conversation
                    if(!originalPhoneNumber && !currentConversationRecordId){
                        originalPhoneNumber = phoneE164Formatter(getCookie('phone'));
                        j$('[id$=originatingNumber]').text(originalPhoneNumber);
                        j$('#recipientInputId').val(phoneFormatter(originalPhoneNumber), locale);
                        currentConversationRecordId = getCookie('cvid');
                        if(socialPersonaData){
                            originalPhoneNumber = socialPersonaData['ExternalId'];
                            j$('#recipientInputId').val(originalPhoneNumber);
                            j$('[id$=originatingNumber]').text(originalPhoneNumber);
                            isPhoneInvalid = false;
                        }
                    }
                    if(currentConversationRecordId){
                        sforce.connection.sessionId = '{!$Api.Session_ID}';
                        var soqlQuery = 'Select id, {!nameSpace}Status__c, {!nameSpace}Formatted_Transcript_1__c,  {!nameSpace}AcceptedBy__c FROM {!nameSpace}Conversation_Header__c WHERE Id =\''+currentConversationRecordId+'\' Limit 1';
                        sforce.connection.query(soqlQuery, function(result){
                            if(result == null || result['records'] == null || result['records']['{!nameSpace}AcceptedBy__c'] != '{!$User.Id}' ){
                                if(result != null && result['records'] != null && result['records']['{!nameSpace}Formatted_Transcript_1__c'] != null && result['records']['{!nameSpace}AcceptedBy__c'] == null){
                                    //This part is executed only when user refreshes conversation page, and conversation is reopened
                                    conversationLoadError = true;
                                    disableChatButtons(true);
                                    unlockMainTab();
                                }else{
                                    //This part is executed when other user accepted new (not reopened) text session
                                    conversationLoadError = true;
                                    disableChatButtonsAcceptedError(true);
                                    acceptedError = true;
                                    unlockMainTab();
                                }
                            }else if(result['records']['{!nameSpace}Status__c'] == "Ended"){
                                //This part is executed when user refreshes page after ending conversation
                                conversationLoadError = true;
                                disableChatButtons(true);
                                unlockMainTab();
                                enablePopover();
                            }else if(result['records']['{!nameSpace}Formatted_Transcript_1__c'] == null){
                                //This part is executed only when user refreshes conversation page, and conversation is not reopened
                                reloadChat(function(){
                                    Visualforce.remoting.Manager.invokeAction(
                                        '{!$RemoteAction.LiveTextChatController.insertSMSTextRecordStatic}',
                                        currentConversationRecordId,
                                        function(result, event){
                                            if(result != null)  {

                                            }
                                        }
                                    );
                                });

                            }else{
                                reloadChat();
                            }
                        });
                    }else{
                        unlockMainTab();
                    }
                    initConversation(
                        currentConversationRecordId,
                        originalPhoneNumber,
                        getSafeParameterByName('conversationtype', pageUrl),
                        getSafeParameterByName('phonetype', pageUrl),
                        objectId,
                        objectPrefix,
                        orginatingObjectId,
                        socialIdToPass
                    );
                }
            );

            if (channelId) {
                configureChannels(channelId);
            } else {
                Visualforce.remoting.Manager.invokeAction(
                    '{!$RemoteAction.LiveTextChatController.getSupportChannelId}',
                    originatingNumber,
                    currentConversationRecordId,
                    function(result, event) {
                        configureChannels(result);
                    }
                );
            }
        });
    }

    function configureChannels(selectedChannelId) {
        var channels = '';
        for (var key in channelsMap) {
            if (key == selectedChannelId) {
                channels += '<option value="' + key + '" selected>' + channelsMap[key][fldName] + '</option>';
            } else {
                channels += '<option value="' + key + '">' + channelsMap[key][fldName] + '</option>';
            }
        }
        j$('#supportNumberSelect').append(channels);
        j$('#supportNumberSelect').change(function() {
            formatDisplayedPhoneField();
            setChannelIcon();
        });
        setChannelIcon();
    } // end of configureChannels

    function setChannelIcon() {
        var imageSrc = '';
        var activeChannelType = getActiveChannelType();
        if (activeChannelType == facebookChannel) {
            imageSrc = "{!URLFOR($Resource.LiveText, 'images/icon_fbmessenger.png')}"
        } else if (activeChannelType == textChannel) {
            imageSrc = "{!URLFOR($Resource.LiveText, 'images/icon_sms.png')}";
        } else if (activeChannelType == appleChannel) {
            imageSrc = "{!URLFOR($Resource.LiveText, 'images/icon_abc.png')}";
        }
        j$('.channel-logo').attr('src', imageSrc);
    } // end of setChannelIcon

    function reloadChat(callback) {
        setTimeout(function(){
            Visualforce.remoting.Manager.invokeAction(
                '{!$RemoteAction.LiveTextChatController.getInitialMessage}',
                currentConversationRecordId,
                function(result, event) {
                    if(result != null) {
                        j$("#chatBox").html('');
                        LiveTextChat.LT.displayMessageList(result, false);
                        hideLoadingProgress();
                        if(callback != null){
                            callback();
                        }
                    } else {
                        console.log('There is no Internet connection');
                        reloadChat();
                    }
                }
            )
        },1500)
    }

    function redirectPrimaryTab(phoneNumber){
        sforce.console.getFocusedPrimaryTabId(function(result) {
            var tabId = result.id;
            sforce.console.getPageInfo(tabId, function(result){
                var resultObj =  JSON.parse(result.pageInfo);
                var pageUrl = resultObj.url;
                var firstPart = pageUrl.substring(0,pageUrl.indexOf('?')+1);
                var paramNames = getUrlParameterNames(pageUrl);
                var newUrl = firstPart;
                for(var i=0;i<paramNames.length;i++){
                    var paramName = paramNames[i];
                    if(i > 0)
                        newUrl += '&';
                    newUrl += paramName;
                    newUrl += '=';
                    if(paramName === 'phone'){
                        newUrl += phoneNumber;
                    }else if(paramName === 'cvid'){
                        newUrl += currentConversationRecordId;
                    }else{
                        newUrl += getSafeParameterByName(paramName, pageUrl);
                    }
                }
                sforce.console.openPrimaryTab(tabId, newUrl, true);
            });
        });
    }

    var subtabIds;
    var sbtabID=0;

    function addConversationHeaderIdToSessionStorage(conversationRecordId){
        var autoLinkingPerformed = isNullOrEmpty(sessionStorage.getItem('autoLinkingPerformed'))
                                    ? []
                                    : JSON.parse(sessionStorage.getItem('autoLinkingPerformed'));
        autoLinkingPerformed.push(conversationRecordId);
        sessionStorage.setItem('autoLinkingPerformed', JSON.stringify(autoLinkingPerformed));
    }

    function addOutboundLiveTextSessionIdToSessionStorage(initObjectId, liveTextSessionId){
        var outboundConversationsWithInitObject = isNullOrEmpty(sessionStorage.getItem('outboundConversationsMap'))
                                                ? {}
                                                : JSON.parse(sessionStorage.getItem('outboundConversationsMap'));
        outboundConversationsWithInitObject[initObjectId] = liveTextSessionId;
        sessionStorage.setItem('outboundConversationsMap', JSON.stringify(outboundConversationsWithInitObject));
    }

    function removeOutboundLiveTextSessionIdFromSessionStorage(initObjectId){
        var outboundConversationsWithInitObject = isNullOrEmpty(sessionStorage.getItem('outboundConversationsMap'))
                                                ? {}
                                                : JSON.parse(sessionStorage.getItem('outboundConversationsMap'));
        if(outboundConversationsWithInitObject.hasOwnProperty(initObjectId)){
            outboundConversationsWithInitObject[initObjectId] = '';
        }
        sessionStorage.setItem('outboundConversationsMap', JSON.stringify(outboundConversationsWithInitObject));
    }

    function getOutboundLiveTextSessionIdFromSessionStorage(initObjectId){
        var outboundConversationsWithInitObject = isNullOrEmpty(sessionStorage.getItem('outboundConversationsMap'))
                                                ? {}
                                                : JSON.parse(sessionStorage.getItem('outboundConversationsMap'));
        return outboundConversationsWithInitObject.hasOwnProperty(initObjectId) ? outboundConversationsWithInitObject[initObjectId] : '';
    }

    function isOutBoundConversation(){
        return  j$('[id$="hiddenconvtype"]').text() === 'Outbound';
    }

    function getObjectName(){
        return j$('[id$="hiddenobjectname"').text();
    }

    function getMasterObjectName(){
        return  j$('[id$="hiddenmasterobjectname"').text();
    }

    function getConversationRecordId(){
        var tempId = j$('[id$="hiddenconversationRecordId"]').text();
        if((tempId == null || tempId == '') && isOutBoundConversation()){
            tempId = getOutboundLiveTextSessionIdFromSessionStorage(objectId);
        }
        return tempId;
    }

    function isConversationInQueue(){
        return j$('[id$="hiddenisconversationinqueue"]').text() == 'true';
    }

    function getInitialMessageList(){
        return  j$('[id$="hiddeninitialmessage"]').text();
    }

    function getConvHeaderStatus(){
        return  j$('[id$="convHeaderStatus"]').val();
    }

    function getOriginatingNumber(){
        return  j$('[id$="originatingNumber"]').text();
    }

    function getActiveChannel(){
        var records = getMyChannels();
        return getActiveChannelType() == textChannel ? records[getActiveChannelId()][0].replace(/[^0-9\+]/g,'') : records[getActiveChannelId()][0];
    }

    function getActiveChannelType(){
        var channelId = getActiveChannelId();
        if (channelId) {
            return channelsMap[channelId][fldChannelType];
        } else {
            return '';
        }
    }

    function getActiveChannelTimeout(){
        var records = getMyChannels();
        return records[getActiveChannelId()][1] === 'null' ? 'null' : records[getActiveChannelId()][1]*1000;
    }

    function getActiveChannelId(){
        return j$('#supportNumberSelect').val();
    }

    function getActiveChannelLabel(){
        return j$('#supportNumberSelect option:selected').text();
    }

    function getConversationHeaderList(){
        return j$('[id$="hiddenoptxtLTChat"]').text();
    }

    function setConversationHeaderList(list){
        j$('[id$="hiddenoptxtLTChat"]').text(list);
    }

    function isShortCode(phoneNumber){
        phoneNumber = phoneNumber.replace(/\D/g,'');
        return phoneNumber.length == 5 || phoneNumber.length == 6;
    }

    //sends message when send button is clicked
    function validatePhoneNumbers(channelId, phoneNumber, callback){
            Visualforce.remoting.Manager.invokeAction(
                    '{!$RemoteAction.LiveTextChatController.validatePhoneNumbers}',
                    channelId,
                    phoneNumber,
                    callback);
    }
     //checks optoutstatus before send
    function optCheck(callback) {
        var channelId = getActiveChannelId();
        var phoneNumber = getOriginatingNumber().replace(/[^0-9\+]/g,'');
        var channelLabel = getActiveChannelLabel();
        var objectName = getObjectName();
        var objectName = (objectName != null && objectName.length > 0 && phoneNumber.indexOf(originalPhoneNumber) !=-1) ? objectName : getOriginatingNumber();
        Visualforce.remoting.Manager.invokeAction(
            '{!$RemoteAction.LiveTextChatController.getOptinStatusMessage}',
            channelId,
            phoneNumber,
            channelLabel,
            objectName,
            callback);
    }

    function getMyChannels(){
        var channelsObj = j$('[id$=hiddenChannels]').text();
        if (channelsObj) {
            return j$.parseJSON(channelsObj);
        }
        return null;
    }

    function generateMessageToAppend(message, name, classprefix, timestamp, linkifyclass, recordIdClass){
            var content = '<div class=';
            content += recordIdClass ? '"recordId-'+recordIdClass+'"' : '"recordId-'+linkifyclass+'"';
            content += '><span class="' + classprefix + '-label_old chatBox-font">' + name + ': </span>'+
                          '<output class="' + linkifyclass + ' output chatBox-font color-grey">' + message + '</output>';
            content +='</div>';
            return content;
    }

    function showEndByCustomerNotification(){
        var name = getActiveChannelType() == textChannel ? j$('#recipientInputId').val() : j$('#recipientDisplay').text();
        var content = '<h3 id="endedByUserNotificationDiv">'+
                        name + ' ' + $Label.ChatEndByCustomerLbl +
                    '</h3>';
        j$('#chatBox').append(content);
    }

    function showTypingNotification(){
        if (typingTimeout != null){
            clearTimeout(typingTimeout);
        }
        typingTimeout = setTimeout(function() {
            hideTypingNotification();
        }, 10000);
        if(j$('#typingNotificationDiv').length === 0){
            var name = getActiveChannelType() == textChannel ? j$('#recipientInputId').val() : j$('#recipientDisplay').text();
            var content = '<div id="typingNotificationDiv" class="typing">'+
                            name + ' is typing' +
                        '</div>';
            j$('#chatBox').append(content);
            scrollChatBox(false);
        }
    }

    function hideTypingNotification(){
        clearTimeout(typingTimeout);
        j$('#typingNotificationDiv').remove();
    }

    function moveTypingNotificationToTheBottom(){
        if(j$('#typingNotificationDiv').length !== 0){
            hideTypingNotification();
            showTypingNotification();
            scrollChatBox(false);
        }
    }

    function displayInboundMessage(user, msg, autoScroll, suppressAudio, timestamp, recordId, status, errorCode, errorSubCode) {
        hideTypingNotification();
        var isImage = isAttachmentLink(LiveTextChat.LT.unescapeHtml(msg));
        var dateTimeFormResponse = isDateTimeFormResponse(LiveTextChat.LT.unescapeHtml(msg));
        if(typeof user == 'undefined'){
            user = getActiveChannelType() == textChannel ? j$('#recipientInputId').val() : j$('#recipientDisplay').text();
        }
        if(isImage){
            var attachemntSrc = j$(j$.parseHTML(LiveTextChat.LT.unescapeHtml(msg))).find('.attachmentLink').attr("href");
            msg = '<div><img style="max-width:100%; max-height:100%;cursor:pointer; vertical-align: text-top;" ';
            msg+= 'onclick="openImgInTab(\''+attachemntSrc+'\')" ';
            msg+= 'src="' + attachemntSrc + '"></div>';
        }else if(dateTimeFormResponse){
            var timeString = j$(j$.parseHTML(LiveTextChat.LT.unescapeHtml(msg))).text();
            var mom = moment(timeString).utcOffset(timezoneOffset);
            msg = mom.format("dddd, MMMM Do YYYY") + ' ' + mom.format('h:mm a');
        }
        else{
            msg = LiveTextChat.LT.escapeHtml(msg);
        }
        var objectName = getObjectName();
        if(isOutBoundConversation() && objectName != null && objectName.length > 0){
            user = objectName;
            if(user.length > 25){
                user = user.substring(0,25) + '...';
            }
        }

        chatMsgCounter++;
        var msgClassName = 'receivedtxtMsg-' + chatMsgCounter;
        //htmlEntities => Convert special character into HTML readable string
        //-V- new chat design
        j$('#chatBox').append(generateMessageToAppend(msg, user, 'recipient', timestamp, msgClassName, recordId));
        j$('.' + msgClassName).linkify();
        if(isImage){
                j$('.senttxtMsg-' + chatMsgCounter + ' .attachmentLink').click(function(){
                    var tabLink = j$(this).attr("href");
                    var tabLabel = j$(this).text();
                    var tabIcon = "{!URLFOR($Resource.LiveText,'images/LTicon16.png')}";
                    var openSubtab= function(result) {
                        var pID = result.id;
                        sforce.console.openSubtab(pID, tabLink, true,tabLabel, null, function(result){
                            if(result.success !== true){
                                console.log('A console tab for this ' + tabLabel + ' is already open.');
                            }else{
                                sforce.console.setTabIcon(tabIcon,result.id);
                            }
                        });
                    };
                    sforce.console.getEnclosingPrimaryTabId(openSubtab);
                    return false;
                });
            }
        if(autoScroll == null || autoScroll == true){
            var animatedScroll = isImage;
            scrollChatBox(animatedScroll);
        }
        LiveTextChat.LT.playSendReceiveAudio(suppressAudio);
        lastMessageTimestamp = timestamp;
        return msgClassName;
    }

    function isValidURL(str) {
        var inValid = /\s/;
        if(inValid.test(str)){
            return false;
        }
        var regexp = /(ftp|http|https):\/\/(\w+:{0,1}\w*@)?(\S+)(:[0-9]+)?(\/|\/([\w#!:.?+=&%@!\-\/]))?/
        return regexp.test(str);
    }

    //-V-//remove after implementing inbound and outbound images as attachments
    function isImageURL(str) {
        if(!isValidURL(str)) return false;
        if (/(jpg|gif|png|JPG|GIF|PNG|JPEG|jpeg)$/.test(str)){
            return true;
        }
        return false;
    }

    function isAttachmentLink(str){
        if(str == null){
            return false;
        }
        return (str.startsWith('<span><a class="attachmentLink" href="/servlet/servlet.FileDownload?file=') && str.endsWith('</span>'));
    }

    function isDateTimeFormResponse(str){
        if(str == null){
            return false;
        }
        return (str.startsWith('<div class="datetimeFormResponse"') && str.endsWith('</div>'));
    }

    function isFormMessage(str){
        if(str == null){
            return false
        }
        return (str.startsWith('<div class="form">') && str.endsWith('</div>'));
    }

    function prepareFormMessage(str){
        var div = document.createElement('div');
        div.innerHTML = str;
        var scripts = div.getElementsByTagName('script');
        var i = scripts.length;
        while (i--) {
          scripts[i].parentNode.removeChild(scripts[i]);
        }
        return div.innerHTML;
    }

    function openImgInTab(msg){
        var urlToUse='/apex/{!nameSpace}LiveTextPic?imageurl='+escape(msg);
        sforce.console.openSubtab(currentTabId, urlToUse, true, 'Image' ,null, function(result){
            //Report whether we succeeded in opening the subtab
            if(result.success == true){
             //the image was opened as a subtab
            }else{
                alert($Label.ChatPageSubtabForImageOpenLbl); //@TODO: change focus on opened subtab
            }
        });
    }

    function openOutboundImgInSubTab(msg, name){
        var urlToUse='/apex/{!nameSpace}LiveTextPic?imageurl=' + name;
        sforce.console.openSubtab(currentTabId, urlToUse, true, 'Image' ,null, function(result){
             //Report whether we succeeded in opening the subtab
            if(result.success == true){
                setTimeout(function(){
                    var message = {};
                    message['url'] = msg;
                    message['subTabid'] = result.id;
                    sforce.console.getFocusedPrimaryTabId(function(result){
                        message['fireEventPrimaryTabId'] = result.id;
                        sforce.console.fireEvent( 'setImage', JSON.stringify(message), function(){} );
                    });
                 },
                1000);
             //the image was opened as a subtab
            }else{
                alert($Label.ChatPageSubtabForImageOpenLbl);//@TODO: change focus on opened subtab
            }
        });
    }

    function scrollChatBox(animated){
        if(animated){
            var cbox = j$('#chatBox');
            var height = cbox.scrollTop() + cbox.height() + j$('#chatBox').filter('.agent-message:last').scrollTop();
            var heightbot = j$("#chatBox").prop("scrollHeight");
            cbox.animate({'scrollTop' : height}, 400);
            cbox.animate({'scrollTop' : heightbot}, 400);
        }else{
            j$("#chatBox").scrollTop(j$("#chatBox").prop("scrollHeight"));
        }
    }

    function onReloadConversationFromServerComplete(){
        j$("#chatBox").html('');
        LiveTextChat.LT.getUsername(true);
    }

    function clearFiles(){
        document.getElementById('files').value = '';
        j$('#camera').attr('src', '');
        j$('#camera').hide();
        j$('#cameraIcon').show();
        j$('#removeAttachedImage').hide();
        files = [];
    }

    function sendMMS(isFirst){
        var positionIndex = 0;
        for (var i = 0, f = files[i]; i < files.length; i++) {
            if(f === undefined){
              continue;
            }
            if (!f.type.match('image/(jpg|gif|png|JPG|GIF|PNG|JPEG|jpeg)')){
              alert($Label.UnsupportedFileFormatMMS);
              removeAttachedFile();
              continue;
            }else{
              var reader = new FileReader();
              reader.onload = (function(theFile){
                  var fileSize = f.size;
                  return function(e){
                    var fileblob = e.target.result;
                    if(theFile.size <= maxFileSize){
                        totalLength = this.result.length;
                        if(totalLength < maxStringSize){
                            j$('#camera').attr('src', e.target.result);
                            j$('#camera').show();
                            j$('#cameraIcon').hide();
                            sentMMSText = '<br/> >>> ' + $Label.ChatPageMMSSentLbl + ' ';
                            sentMMSText += theFile.name;
                            sentMMSText += ' <<< <br/>';
                            j$('#removeAttachedImage').show();

                            if(!isFirst){
                                var originatingNumber = getOriginatingNumber();
                                var supportNumber = getActiveChannel();
                                var encodedFile = e.target.result.split(',')[1];
                                function upload(conversationId, firstNumber, secondNumber, image, imageTitle, part, mimeType){
                                    client.createBlob('Attachment', {
                                        'ParentId': conversationId,
                                        'Name': theFile.name,
                                        'ContentType': theFile.type
                                        },
                                    theFile.name,
                                    'Body',
                                    theFile,
                                    function(response){
                                        Visualforce.remoting.Manager.invokeAction(
                                        '{!$RemoteAction.LiveTextChatController.sendMMSAsAttachment}',
                                          conversationId,
                                          firstNumber,
                                          secondNumber,
                                          response.id,
                                          imageTitle,
                                          getActiveChannelId(),
                                          theFile.type,
                                          chatMsgCounter + 1,
                                          function(result, event){
                                            var jsonResult = j$.parseJSON(LiveTextChat.LT.unescapeHtml(result))
                                            if(jsonResult.Id !== undefined){
                                                conversationAlertOn = false;
                                                clearTimeout(conversationTimer);
                                                conversationShouldTurnRedMap[currentTabId] = false;
                                                sforce.console.setTabStyle(null, currentTabId, null);
                                                sforce.console.setTabTextStyle(null, currentTabId);
                                                conversationShouldTurnRedMap[currentSubTabId] = false;
                                                sforce.console.setTabStyle(null, currentSubTabId, null);
                                                sforce.console.setTabTextStyle(null, currentSubTabId, null);

                                                var agentname = '{!JSENCODE(userName)}';
                                                LiveTextChat.LT.displayOutboundMessage(j$.trim(agentname), LiveTextChat.LT.escapeHtml(jsonResult.message), 'livetext', true, false, new Date().getTime(), null, null, null, true);
                                                 j$(".recordId-senttxtMsg-" + jsonResult.messageId).addClass('recordId-' + jsonResult.Id).removeClass('recordId-senttxtMsg-' + jsonResult.messageId);

                                                LiveTextChat.LT.resetCount();
                                            }else{
                                                //No Id = no sms_text__c display error.
                                                var agentname = '{!JSENCODE(userName)}';
                                                var imageElement = '<img style="cursor: pointer;vertical-align: text-top;" src="' + fileblob + '" onclick=openOutboundImgInSubTab("'+ fileblob +'","'+ new Date().getTime().toString() + '"); title="image"/>';
                                                LiveTextChat.LT.displayOutboundMessage(j$.trim(agentname), imageElement, 'livetext', true, false, new Date().getTime(), null, null, null, true);
                                                LiveTextChat.LT.addGeneratedError(jsonResult.success, jsonResult.errorCode, jsonResult.errorSubCode, chatMsgCounter);
                                            }

                                            if(jsonResult.statusCode == 200){
                                                //success - do nothing
                                            }else if(event.type === 'exception'){
                                                console.log('exception');
                                                LiveTextChat.LT.addGeneratedError(jsonResult.success, jsonResult.errorCode, jsonResult.errorSubCode, jsonResult.Id);
                                            }else{
                                                console.log('exception2');
                                                console.log(event);
                                                LiveTextChat.LT.addGeneratedError(jsonResult.success, jsonResult.errorCode, jsonResult.errorSubCode, jsonResult.Id);
                                            }

                                            clearFiles();
                                          },
                                          {buffer: false, escape: true, timeout: 120000}
                                        );
                                    },
                                        function(request, status, response){
                                            console.log('ERROR: ' + status);
                                            clearFiles();
                                            LiveTextChat.LT.displayInsertRecordError($Label.SMSNotDeliveredLbl, ".senttxtMsg-" + chatMsgCounter);
                                    });
                                }

                                if(currentConversationRecordId == ''){
                                    insertConversationHeader(sentMMSText, chatMsgCounter, objectId, false, true, false, function(){
                                        if(currentConversationRecordId != ''){
                                            upload(currentConversationRecordId, originatingNumber, supportNumber, encodedFile, theFile.name, 'First',theFile.type);
                                        }
                                    });
                                }else{
                                    upload(currentConversationRecordId, originatingNumber, supportNumber, encodedFile, theFile.name, 'First',theFile.type);
                                }
                            }else{
                                enableSendButton();
                            }
                        }else{
                            alert($Label.ChatPageImageToLargePrefix + " " + maxStringSize + " " + $Label.ChatPageImageToLargeSuffix + " " + totalLength + ".");
                            j$('#files').wrap('<form>').closest('form').get(0).reset();
                            j$('#files').unwrap();
                            removeAttachedFile();
                            j$('#removeAttachedImage').hide();
                        }
                    }else{
                      alert($Label.ChatPageImageToLargeLbl);
                      j$('#files').wrap('<form>').closest('form').get(0).reset();
                      j$('#files').unwrap();
                      removeAttachedFile();
                      j$('#removeAttachedImage').hide();
                    }
                }
              })(f);
              if(!isFirst){
                files[i] = undefined;
              }
              reader.readAsDataURL(f);
              break;
            }
        }
    }

    function setBaseValues() {
        var max = 480;
        if(getActiveChannelType() == facebookChannel || getActiveChannelType() == appleChannel){
            max = 320;
            j$('#recipientChannelWithPhoto').show();
            j$('#recipientChannelWithoutPhoto').hide();
            if(j$('#userAvatarImg').attr('src') != null && j$('#userAvatarImg').attr('src') != ''){
                j$('#userAvatar').attr('src', j$('#userAvatarImg').attr('src'));
                j$('#userAvatar_parent').show();
                j$('#fb_defaultAvatar').hide();
            }
            j$('#recipientDisplay').text(j$('[id$="recipientIdNonText"]').text());
            j$("#sendImageRequestButton").hide();
            if(getActiveChannelType() == appleChannel){
                j$('#addFormIconDiv').show();
                setFormPicklistValues(getActiveChannelId());
            }
        }else{
            j$('#recipientId').show();
        }
        j$("#textareaInput").attr('maxlength', max+1);
        document.cookie = 'documentpreviouslyloaded=1';

        currentConversationRecordId = getConversationRecordId();
        if(currentConversationRecordId != null && currentConversationRecordId != '' && isOutBoundConversation()){
            Visualforce.remoting.Manager.invokeAction(
                '{!$RemoteAction.LiveTextChatController.getInitialMessage}',
                currentConversationRecordId,
                function(result, event){
                  if(result != null){
                    LiveTextChat.LT.displayMessageList(result, false);
                   enableElementsForActiveSession();
                  }
            });
        }

        LiveTextChat.LT.persistObjectLinkingOnRefresh();

        sforce.console.addEventListener('NewSMSText', function(result){
            console.log(result);
            var turnAlertOn = true;
            var message = j$.parseJSON(result.message);
            console.log('LiveMessage Page subscribe message: ' + '[' + new Date() + '] payload: [' + JSON.stringify(message) + ']');
            if(message.data.sobject[fldConvHeader] == currentConversationRecordId && convHeaderStatus != 'Ended'){
                sforce.connection.sessionId = '{!$Api.Session_ID}';
                var soqlQuery = 'Select id,{!nameSpace}AcceptedBy__c FROM {!nameSpace}Conversation_Header__c WHERE Id =\''+currentConversationRecordId+'\' Limit 1';
                sforce.connection.query(soqlQuery, function(res){
                    if(res['records']['{!nameSpace}AcceptedBy__c'] == '{!$User.Id}'){
                        // have to do remoting to retrive message__c, since in push topic we cannot retrive Long Text Area field
                        Visualforce.remoting.Manager.invokeAction(
                            '{!$RemoteAction.LiveTextChatController.getSMSTextRecord}',
                            message.data.sobject.Id,
                            function(result, event){
                                if(event.status){
                                    //-V- change to stroe messgaes in js list
                                    if(lastMessageTimestamp > result[fldOriginTimestamp]){
                                        reloadChat();
                                    }else if(result[fldSource] == liveText){
                                        //do whatever rendering of the list you want
                                        displayInboundMessage(result[fldRecipientLabel], result[fldMessage], true, false, result[fldOriginTimestamp], result[fldId], result[fldSentToCustomer], result[fldErrorCode], result[fldErrorSubCode]);
                                    }else if(result[fldSource] == conversationEventMessage && getActiveChannelType() == appleChannel){
                                        if(result[fldMessage] == typingStart){
                                            showTypingNotification();
                                        }else if(result[fldMessage] == typingStop){
                                            hideTypingNotification();
                                        }else if(result[fldMessage] == closeConversation){
                                            //end conversation without sending outbound message
                                            disableChatButtons(false);
                                            hideAttachOptions();
                                            removeForm();
                                            endChatAction(currentConversationRecordId, false);
                                            showEndByCustomerNotification();
                                        }
                                        turnAlertOn = false;
                                    }else {
                                        //auto-message
                                        turnAlertOn = false;
                                        LiveTextChat.LT.displayOutboundMessage(username, result[fldMessage], result[fldSource], result[fldSentToCustomer], true, result[fldOriginTimestamp], result[fldId], result[fldErrorCode], result[fldErrorSubCode], true);

                                    }
                                    if(!conversationAlertOn && turnAlertOn){
                                        sforce.console.setTabStyle('background:#fffbaf;', currentTabId);
                                        sforce.console.setTabStyle('background:#fffbaf;', null);
                                        sforce.console.setTabStyle('background:#fffbaf;', currentSubTabId, null);
                                        sforce.console.setTabTextStyle(null, currentTabId);
                                        sforce.console.setTabTextStyle(null, currentSubTabId);
                                        conversationShouldTurnRedMap[currentTabId] = true;
                                        conversationShouldTurnRedMap[currentSubTabId] = true;
                                        if(getActiveChannelTimeout() !== 'null'){
                                              turnRedAfterTimout(getActiveChannelTimeout(), currentTabId, currentSubTabId)
                                        }
                                    }
                                }
                            }, {
                                escape: true
                            }
                        );
                    }
                });
            }
        });

        sforce.console.addEventListener('NewConversationHeader', function(result){
            var message = j$.parseJSON(result.message);
            var end = JSON.stringify(message.data.sobject[fldStatus]);
            var ended = JSON.parse(end);
            var temp = JSON.parse('"' + $Label.EndStatus + '"');
            var convHeaderIdFromPushTopic = JSON.stringify(message.data.sobject[fldId]);
            var convHdIdFromPushTopic = JSON.parse(convHeaderIdFromPushTopic);

            if((ended === temp) && (currentConversationRecordId === convHdIdFromPushTopic)){
                sforce.console.setTabUnsavedChanges(false, function(){}, currentSubTabId);
                disableEndSessionButton();
                disableSendButton();
                disableAddFormPopover();
                j$("#textareaInput").attr('disabled', 'disabled');
                j$("#textareaInput").attr('placeholder', $Label.EndedChatSendMsgPlaceholderLbl);
            }
        });

        function reloadConversationFromServer(){
            try{
                console.log('Chat Page Testing for Sfdc.provide in reloadConversationFromServer');
                Sfdc.provide("SfdcApp.Visualforce.VSManager",{});
            }catch(e){
                console.log('reloadConversationFromServer Error:' +e);
                if(e.message.indexOf('Sfdc.provide is not a function') >= 0){
                    sessionTimeoutOccured = true;
                    showConnectivityError();
                    return;
                }
            }
            _reloadConversationFromServer();
        }

        sforce.console.addEventListener('ConnectivityChanged', function(result){
            var connected = (result.message == '1');
            if(connected){
                showLoadingProgress();
                if(currentConversationRecordId != null && currentConversationRecordId != ''){
                   reloadChat();
                }else{
                    j$("#chatBox").html('');
                    disableEndSessionButton();
                    hideLoadingProgress();
                }
            }
        });

        //event listenter which gets fired whenever textarea gets changed from quicktext.page
        sforce.console.addEventListener('textAreaChanged', function(result){
            var message = j$.parseJSON(result.message);
            sforce.console.getEnclosingPrimaryTabId(function(result1){
              if(message.currentPrimaryTabID == result1.id){
                var cursorPosStart = j$('#textareaInput').prop('selectionStart');
                var cursorPosEnd = j$('#textareaInput').prop('selectionEnd');
                var v = j$('#textareaInput').val();
                var textBefore = v.substring(0,  cursorPosStart );
                var textAfter  = v.substring( cursorPosEnd, v.length );
                j$('#textareaInput').val( textBefore+ message.selectedMessage +textAfter );
                j$('#textareaInput').trigger("input");
              }
            });
        });
        sforce.console.addEventListener('recordLinkedFromDetailJS', function(result){
            var message = j$.parseJSON(result.message);
            var tempTabId = message['currentPrimaryTabID'];
            sforce.console.getEnclosingPrimaryTabId(function(result){
                if(tempTabId == result.id){ //This check is required otherwise all the primary tabs opened will fire this event.
                    reloadCaseTab(message);
                    if(message.linked){
                        var element = j$('#'+message.objecttype+'CheckBox');
                        element.prop('checked', true);
                        j$('#'+message.objecttype+'CheckBoxLabel').show();
                        element.attr('objectId', message.objectid).attr('objecttype', message.objecttype).attr('objectprefix', message.objectprefix).attr('objectlinkname', message.    objectlinkname).attr('linked', false).attr('objectplurallabel', message.objectplurallabel).attr('checked', 'checked').attr('onclick', 'fireLinkingEvent(this)');
                        j$('#'+message.objecttype+'LookupText').text(message.objectlinkname);
                    }else{
                        j$('#'+message.objecttype+'CheckBox').prop('checked', false);
                        j$('#'+message.objecttype+'CheckBoxLabel').hide();
                        j$('#'+message.objecttype+'LookupText').text('No open '+message.objectplurallabel);
                    }
                }
            });
        });

        afterEnter = false;
        convHeaderStatus = getConvHeaderStatus();
        if(convHeaderStatus != 'Active'){
            disableEndSessionButton();
            disableSendButton();
            disableAttachButton();
            disableAddFormPopover();
            j$("#textareaInput").attr('disabled', 'disabled');
            if(convHeaderStatus == $Label.EndStatus){
                j$("#textareaInput").attr('placeholder', $Label.EndedChatSendMsgPlaceholderLbl);
            }
            LiveTextChat.LT.resetCount();
        }else if (currentConversationRecordId != null && currentConversationRecordId != ''){
             var soqlQuery = 'Select id, {!nameSpace}Status__c, {!nameSpace}Formatted_Transcript_1__c,  {!nameSpace}AcceptedBy__c FROM {!nameSpace}Conversation_Header__c WHERE Id =\''+currentConversationRecordId+'\' Limit 1';
              sforce.connection.query(soqlQuery, function(result){
                if(result != null && result['records'] != null && result['records']['{!nameSpace}AcceptedBy__c'] == '{!$User.Id}' ){
                       enableElementsForActiveSession();
                   }
               });
        }

        j$('#recipientInputId').focus(function(){
            removeErrorOriginatingPhone();
        });

        j$('#recipientInputId').change(function(){
            formatDisplayedPhoneField(j$('#recipientInputId').val());
        });

        formatDisplayedPhoneField();
        var conversationObj = getConversationHeaderList();
        if(conversationObj){
          conversationRecords = j$.parseJSON(conversationObj);
        }
        var setOriginatingIcon= function(result) {
            if(result.success == true){
                var objPrefix=objectId.substring(0,3);
                for(var j = 0; j < objectInformationForLinking.length; j++){
                    if(objPrefix == objectInformationForLinking[j]['recordPrefix']){
                        sforce.console.setTabIcon(objectInformationForLinking[j]['miniIconUrl'],result.id);
                    }
                }
            }
        };
        //Add a listener to handle the closing of the enclosing primary tab
        sforce.console.getEnclosingPrimaryTabId(function(result) {
            currentTabId = result.id;
            if(isOutBoundConversation()){
                var objectName = getObjectName();
                var masterObjectName = getMasterObjectName();
                var tabName = objectName == null || objectName === '' ? masterObjectName : objectName;
                sforce.console.setTabTitle(tabName);
                sforce.console.setTabIcon('{!URLFOR($Resource.LiveText,'images/LTicon16.png')}', currentTabId);
                sforce.console.openSubtab(currentTabId, '/'+objectId, true, masterObjectName, null, setOriginatingIcon);
            }
            sforce.console.getSubtabIds(currentTabId, function(subTabs){
                currentSubTabId = subTabs.ids[0];
                if(convHeaderStatus === $Label.ActiveStatus){
                    if(!acceptedError)
                        sforce.console.setTabUnsavedChanges(true, function(){}, currentSubTabId);
                    addTabCloseListener();
                }
            });
        });

        // Disable send button - by default
        disableSendButton();
        // Disable text area if no support numbers
        if( getActiveChannelId() === '' ||  getActiveChannelId() == null){
            j$("#textareaInput").attr('disabled', 'disabled');
        }

        j$('#textareaInput').keypress(function(e) {
            var cs = j$(this).val();
            if (j$.trim(cs).length > 0) {
                var len = LiveTextChat.LT.utf8ByteLength(cs);
                if (len > max) {
                    this.value = this.value.substring(0, max);
                }
                if (e.which == 13) {
                    //Trigger the #send button
                    j$("#sendMessage").click();
                    afterEnter = true;
                    j$("#textareaInput").focus().val(j$("#textareaInput").val());
                    disableSendButton();
                } else {
                    // if len > 480 and del pressed enable to del characters.
                    if (e.which != 8) {
                        if (len == max) {
                            return false;
                        }
                    }
                }
            } else {
                // if user has not entered any value, and tries to hit enter key, prevent it.
                if (e.which == 13) {
                    return false;
                }
                LiveTextChat.LT.resetCount();
            }
        });

        // Function when keyup is pressed.
        j$("#textareaInput").on("input", function(event) {
            // Enable send button if textbox has value > 1
            if(okToSend()){
                //Enable send button when endChat button is enabled or it's first outbound message
                if(j$('#endSessionButton').is(':enabled') || (isOutBoundConversation() && (j$("#chatBox").children().length == 0))){
                    enableSendButton();
                }
                if (event.which != 13){
                    var chs = j$(this).val();
                    var le = parseInt(LiveTextChat.LT.utf8ByteLength(j$.trim(chs)));
                    var messagelength;
                    var characterCountString = le;
                    if(getActiveChannelType() != facebookChannel && getActiveChannelType() != appleChannel){
                      if (le % 160 === 0) {
                          messagelength = le / 160;
                          characterCountString += ' (' + messagelength + ')';
                      } else if (le > 0 && le < 2) {
                          characterCountString += '(' + 1 + ')';
                      } else if (le < 160) {
                          characterCountString += ' (' + 1 + ')';
                      } else if (le < 320) {
                          characterCountString += ' (' + 2 + ')';
                      } else if (le < 480) {
                          characterCountString += ' (' + 3 + ')';
                      }
                      if (le > 480) {
                          characterCountString += ' (' + 3 + ')';
                      } else {
                          j$('#characters').text(le);
                      }
                    }
                    j$('#characterCount').text(characterCountString);
                }
            } else {
                disableSendButton();
                LiveTextChat.LT.resetCount();
            }

            var len = j$.trim(this.value);
            if(afterEnter){
                j$("#textareaInput").val(len);
                disableSendButton();
                afterEnter = false;
            }
            var cs = LiveTextChat.LT.utf8ByteLength(len);
            if (cs > max) {
                //reassign substring of max length to text area value
                j$("textareaInput").val(this.value.substring(0, max));
                j$("textareaInput").text(this.value);
                var substring = j$("#textareaInput").val();
                var ch = LiveTextChat.LT.utf8ByteLength(substring);
                if (ch == max) {
                    alert(max + ' ' + $Label.ChatPageMaxCharsAllowedLbl);
                    if(getActiveChannelType() != facebookChannel && getActiveChannelType() != appleChannel){
                        j$('#characterCount').text(max + ' ('+3+')');
                    }
                } else {
                    alert(max + ' ' + $Label.ChatPageMaxCharsAllowedLbl);
                    characterCountString = max;
                    if(getActiveChannelType() != facebookChannel && getActiveChannelType() != appleChannel){
                        characterCountString += ' ('+ 3 +')';
                    }
                    j$('#characterCount').text(characterCountString);
                }
            }
        });

        function proceedWithSend(isPictureRequest, isFormSend){
            var rawMessage = (isPictureRequest) ? sendingRequestMessage : isFormSend ? JSON.stringify(currentForm['form']) : j$("#textareaInput").val().trim();
            if ((j$.trim(rawMessage).length) > 0) {
                //Encapsulate the string
                var agentname = '{!JSENCODE(userName)}';
                var escapeHtmlMessage = LiveTextChat.LT.escapeHtml(rawMessage);
                var unescapeHtmlMessage = isFormSend ? currentForm['textPreview'] : LiveTextChat.LT.escapeHtml(escapeHtmlMessage);
                /* Remote Action - start*/
                if (rawMessage != "") {
                    //-V- new chat design
                    var connectionIsOnline = checkNetConnection();
                    LiveTextChat.LT.displayOutboundMessage(j$.trim(agentname), j$.trim(unescapeHtmlMessage), 'livetext', true, false, new Date().getTime(), null, null, null, true);
                    j$("#textareaInput").val('');
                    LiveTextChat.LT.resetCount();
                }
                /* Remote Action - 1 - start */
                //if it is the first outbound message create the conversation header and initial SMS record
                if(isFirstOutboundMessage){
                    insertConversationHeader(rawMessage, chatMsgCounter, objectId, isPictureRequest, false, isFormSend, function(){
                        document.cookie = 'phone='+getOriginatingNumber();
                        document.cookie = 'cvid='+currentConversationRecordId;
                        sforce.console.getEnclosingPrimaryTabId(function(result){
                            var message = {};
                            message['currentPrimaryTabID'] = result.id;
                            sforce.console.fireEvent( 'EnableLinkingOnDetail', JSON.stringify(message), function(){} );
                        });
                    });
                }else if(connectionIsOnline){
                    LiveTextChat.LT.handleMessageSend(rawMessage, chatMsgCounter, isPictureRequest, isFormSend);
                }else{
                    LiveTextChat.LT.addGeneratedError(false, 0,0, chatMsgCounter);
                }
            }else{
                j$("#textareaInput").val('');
                LiveTextChat.LT.resetCount();
            }
            if(files.length > 0){
                sendMMS(false);
            }
        }

        function okToSend(){
        	return (j$("#textareaInput").val().trim().length > 0 || (j$("#camera").attr('src') != '' && j$("#camera").attr('src') != null));
        }

        function handleSend(isPictureRequest, isFormSend){
            console.log('Handling send...');
            if(okToSend() || isPictureRequest || isFormSend){
               	removeErrorOriginatingPhone();

                isFirstOutboundMessage = isOutBoundConversation() && (j$("#chatBox").children().length == 0);
                disableSendButton();
                if(isFirstOutboundMessage){
                    var phone = getOriginatingNumber();
                    if(isPhoneInvalid){
                        addErrorOriginatingPhone($Label.PhoneIsInvalidError);
                        enableSendButton();
                   }else{
                        validatePhoneNumbers(getActiveChannelId(), phone,
                            function(result){
                                var jsonResult = j$.parseJSON(LiveTextChat.LT.unescapeHtml(result));
                                if (!jsonResult.success) {
                                    addErrorOriginatingPhone(jsonResult.errorMessage);
                                    enableSendButton();
                                }else{
                                    optCheck(function(result){
                                        if(result == null){
                                            proceedWithSend(isPictureRequest, isFormSend);
                                        }else{
                                            alert(decodeHtmlNumeric(result));
                                            enableSendButton();
                                        }
                                    });
                                }
                            }
                        );
                    }
                }else{
                    optCheck(function(result){
                        if(result == null||result[fldStatus]==1){
                            proceedWithSend(isPictureRequest, isFormSend);
                        }else{
                            alert(decodeHtmlNumeric(result));
                            enableSendButton();
                        }
                    });
                }
            }else{
                j$("#textareaInput").val('');
                LiveTextChat.LT.resetCount();
            }
        }

        //send button
        j$("#sendMessage").click(function(e) {
            handleSend(false, false);
        });

        //send form button
        j$('#sendForm').click(function(e) {
            handleSend(false, true);
        });

        j$("#closeAttachOptionsButton").click(hideAttachOptions);
        j$("#sendImageRequestButton").click(function(e){
            hideAttachOptions();
            handleSend(true, false);
        });

        if(convHeaderStatus === 'Ended'){
            performEndChat();
        }

        j$('#endSessionButton').click(function() {
            disableEndSessionButton();
        });

        if(conversationLoadError == false){
            enableElementsForActiveSession();
        }

        if(isOutBoundConversation() && (currentConversationRecordId == null || currentConversationRecordId == '')){
            if(j$("#chatBox").children().length == 0 ){
                unlockMainTab();
                enableElementsForNewOutboundSession();
                if(getActiveChannelType() == facebookChannel || getActiveChannelType() == appleChannel){
                    disableElement(j$('#supportNumberSelect'));
                }
            }
        }
        hideLoadingProgress();
    } // End of setBaseValues

    function hideAttachOptions() {
        j$("#attachOptionsArea").hide();
        j$("#textControls").show();
    }

    function insertConversationHeader(rawMessage, chatMsgCounter, objectId, isPictureRequest, isMMS, isFormSend, callback){
        ConversationInitialization = new Object();
        ConversationInitialization.supportNumber = getActiveChannelId();
        ConversationInitialization.originatingNumber = getOriginatingNumber();
        ConversationInitialization.conversationType = $Label.OutboundStatus;
        ConversationInitialization.objectId = objectId;
        ConversationInitialization.originatingFormattedNumber = phoneFormatter(ConversationInitialization.originatingNumber, locale);
        Visualforce.remoting.Manager.invokeAction(
            '{!$RemoteAction.LiveTextChatController.insertConversationHeaderLinkObject}',
            ConversationInitialization,
            function(result, event){
                conversationRecords = result;
                var isAcceptedInboundConversation = false;
                if(event.status){
                    setConversationHeaderList(JSON.stringify(result));
                    currentConversationRecordId = result[0].Id;
                    disableElementsForActiveSession();
                    addConversationHeaderIdToSessionStorage(currentConversationRecordId);
                    addOutboundLiveTextSessionIdToSessionStorage(objectId,currentConversationRecordId);
                    sforce.console.getEnclosingPrimaryTabId(function(result){
                        var message = {};
                        message['currentPrimaryTabID'] = result.id;
                        message['currentConversationRecordId'] = currentConversationRecordId;
                        sforce.console.fireEvent( 'outboundConversationInitiated', JSON.stringify(message), function(){} );
                    });

                    var variableOne = conversationRecords;
                    //setting object link for outbound messages
                    Visualforce.remoting.Manager.invokeAction(
                        '{!$RemoteAction.LiveTextChatController.getObjectInformation}',
                        objectId,
                        function(result, event){
                        if(event.status && result != null){
                            handleLinkRecordsClicked(result);
                        }else{
                            console.log('error: ' + event);
                        }
                    });
                    convHeaderStatus = result[0][fldStatus];
                    j$('[id$=convHeaderStatus]').val(result[0][fldStatus]);
                    conversationObj = getConversationHeaderList();

                    if (convHeaderStatus == $Label.EndStatus) {
                        j$('[id$=isconversationEnded]').val(true);
                    }
                    isAcceptedInboundConversation = result[0][fldConversationType] == $Label.InboundStatus;
                }else{
                    console.log('event' + event.message);
                }
                if(isAcceptedInboundConversation){
                    Visualforce.remoting.Manager.invokeAction(
                        '{!$RemoteAction.LiveTextChatController.getInitialMessage}',
                        currentConversationRecordId,
                        function(result, event){
                            if (event.status){
                                if(result){
                                    var currentText = j$("#chatBox").html();
                                    j$('#chatBox').html('');
                                    LiveTextChat.LT.displayMessageList(result, false);
                                    j$("#chatBox").append(currentText);
                                    scrollChatBox(false);
                                }
                            }
                            if(!isMMS){
                                LiveTextChat.LT.handleMessageSend(rawMessage, chatMsgCounter, isPictureRequest, isFormSend);
                            }
                        }
                    );
                }else{
                    if(!isMMS){
                        LiveTextChat.LT.handleMessageSend(rawMessage, chatMsgCounter, isPictureRequest, isFormSend);
                    }
                }
                if(callback != null){
                    callback();
                }
            }
        );
    }

    function performAfterEndChat(){
        convHeaderStatus = getConvHeaderStatus();
        if(convHeaderStatus == $Label.ActiveStatus && convHeaderStatus == sessionStatusBeforeEnding) {
            // The _endChatAction timed out, never changed from Active to Ended
            showTimeoutErrorMsg();
        } else {
            hideTypingNotification();
            if(isOutBoundConversation() && objectId != null && objectId != undefined){
                removeOutboundLiveTextSessionIdFromSessionStorage(objectId);
            }
            if(convHeaderStatus == $Label.EndStatus){
                performEndChat();
            }else{
                convHeaderStatus = $Label.EndStatus;
                disableEndSessionButton();
            }
        }
    }

    function disableChatButtons(conversationHasEnded){
        disableEndSessionButton();
        disableSendButton();
        disableAttachButton();
        disableAddFormPopover();
        j$("#textareaInput").attr('disabled', 'disabled');
        if(conversationHasEnded){
            j$("#textareaInput").attr('placeholder', $Label.EndedChatSendMsgPlaceholderLbl);
        }
        LiveTextChat.LT.resetCount();
    }

    function disableChatButtonsAcceptedError(conversationHasEnded){
        disableEndSessionButton();
        disableSendButton();
        disableAttachButton();
        disableAddFormPopover();
        j$("#textareaInput").attr('disabled', 'disabled');
        if(conversationHasEnded){
            j$("#textareaInput").attr('placeholder', $Label.EndedChatSendMsgError);
        }
        LiveTextChat.LT.resetCount();
    }

    function performEndChat(){
        sforce.console.setTabUnsavedChanges(false, function(){}, currentSubTabId);
        unlockMainTab();
    }

    function lockMainTab(){
        sforce.console.disableTabClose(true, currentTabId, function(){
            document.cookie = 'phone='+getOriginatingNumber() ;
            document.cookie = 'cvid='+currentConversationRecordId ;
        });
    }

    function checkTabId(tabid){
        return function(result){
            var pageInfo = j$.parseJSON(result.pageInfo);
            if(currentConversationRecordId != null && currentConversationRecordId != undefined){
                if(pageInfo.objectId == currentConversationRecordId.slice(0, -3)){
                    sforce.console.disableTabClose(false, tabid);
                    //autoclose if needed
                    //sforce.console.closeTab(tabid);
                }
            }
        }
    }

    function unlockMainTab(){
        sforce.console.disableTabClose(false, currentTabId, function(){
            document.cookie = 'phone=';
            document.cookie = 'cvid=';
        });
        //unlocking conversationtab
        var tabMap = {};
        sforce.console.getPrimaryTabIds(function(result){
            for(var i=0; i<result.ids.length; i++){
                sforce.console.getPageInfo(result.ids[i], checkTabId(result.ids[i]));
            }
        });
    }

    function addTabCloseListener(){
        var obj = {};
        obj['cid'] = currentConversationRecordId;
        obj['tabId'] = currentTabId;
        obj['acceptErr'] = acceptedError;
        sforce.console.fireEvent('AddTabCloseListener', JSON.stringify(obj));
    }

    function decodeHtmlNumeric( str ) {
        return str.replace( /&#([0-9]{1,7});/g, function( g, m1 ){
                return String.fromCharCode( parseInt( m1, 10 ) );
        }).replace( /&#[xX]([0-9a-fA-F]{1,6});/g, function( g, m1 ){
                return String.fromCharCode( parseInt( m1, 16 ) );
        });
    }

    function turnRedAfterTimout(time, currentTabId, currentSubTabId) {
        conversationAlertOn = true;
        conversationTimer = setTimeout(function(){
            if(conversationShouldTurnRedMap[currentTabId]){
                sforce.console.setTabStyle('background:#c81414;', currentTabId);
                sforce.console.setTabTextStyle('color:#ffffff;', currentTabId);
            }
            if(conversationShouldTurnRedMap[currentSubTabId]){
                sforce.console.setTabStyle('background:#c81414;', currentSubTabId, null);
                sforce.console.setTabTextStyle('color:#ffffff;', currentSubTabId, null);
            }
        }, time);
    }

    function openLookup(url, label){
        customLookup = window.open(url, label+' Search', 'width=670,height=480,top=0,toolbar=no,personalbar=no,location=no,irectories=no,statusbar=no,menubar=no,status=no,resizable=yes,left=60,screenX=60,top=100,screenY=100');
        if (window.focus){
            customLookup.focus()
        }
    }

    function removeAttachedFile(){
        clearFiles();
        hideAttachOptions();
        if(j$('#textareaInput').val().length == 0){
            disableSendButton();
        }
    }

    function fireLinkingEvent(htmlObj){
        var msg = {
            'objectprefix':j$(htmlObj).attr('objectprefix')
            ,'objectid':j$(htmlObj).attr('objectid')
            ,'objecttype':j$(htmlObj).attr('objecttype')
            ,'objectlinkname':j$(htmlObj).attr('objectlinkname')
            ,'linked':false
            ,'objectplurallabel':j$(htmlObj).attr('objectplurallabel')
        };
        msg['currentConversationRecordId'] = currentConversationRecordId;
        sforce.console.getFocusedPrimaryTabId(function(result){
          msg['currentPrimaryTabID'] = result.id;
          sforce.console.fireEvent( 'recordLinkedFromChat', JSON.stringify(msg), function(){} );
        });
    }

    var LiveTextChat = LiveTextChat || {};
    LiveTextChat.LT = (function(){
        "use strict";
        // declare variables here
        var polling_time_interval = 750; //This is in ms and specifies the time duration to poll the new subtab for any object created.

        //===Methods=================================
        // Following functions are exposed only private functions are never exposed and cannot be called
        //Call the function
        function utf8ByteLength(str){
            if (!str) return 0;
            var escapedStr = encodeURI(str);
            var match = escapedStr.match(/%/g);
            return match ? (escapedStr.length - match.length * 2) : escapedStr.length;
        }

        function getUsername(suppressAudio) {
            //Call the function with string parameter
            var initialMessage = getInitialMessageList();
            if (initialMessage.length > 0) {
                var message = jQuery.parseJSON(initialMessage)
                if(message){
                    displayMessageList(message, suppressAudio);
                }
            }
        }

        function displayMessageList(messageList, suppressAudio){
            for (var i = 0; i < messageList.length; i++) {
                if (messageList[i][source] == liveText) {
                    displayInboundMessage(messageList[i][fldRecipientLabel], messageList[i][fldMessage], false, suppressAudio, messageList[i][fldOriginTimestamp], messageList[i][fldId], messageList[i][fldSentToCustomer], messageList[i][fldErrorCode], messageList[i][fldErrorSubCode]);
                }else if(messageList[i][source] == conversationEventMessage){
                    //-V- event messages
                }else{
                    displayOutboundMessage(username, messageList[i][fldMessage], messageList[i][fldSource], messageList[i][fldSentToCustomer], suppressAudio, messageList[i][fldOriginTimestamp], messageList[i][fldId], messageList[i][fldErrorCode], messageList[i][fldErrorSubCode], false);
                }
            }
            scrollChatBox(false);
        }

        function playSendReceiveAudio(suppressAudio) {
            // audio tag to play sound
            j$('<audio  id="chatAudio" class="audioPlayer"><source src="{!URLFOR($Resource.LiveText, 'sounds/sendreceive.ogg')}" type="audio/ogg"><source src="{!URLFOR($Resource.LiveText, 'sounds/sendreceive.mp3')}" type="audio/mpeg"><source src="{!URLFOR($Resource.LiveText, 'sounds/sendreceive.wav')}" type="audio/wav"></audio>').appendTo('body');
            var audio = j$("#chatAudio");
            audio[0].load();//suspends and restores all audio element
            if(!suppressAudio){
                audio[0].play();
            }
        }

        function displayOutboundMessage(username, autoMessage, msgSource, sentToCustomer, suppressAudio, timestamp, recordId, errorCode, errorSubCode, scroll) {
            autoMessage = j$.trim(autoMessage);
            chatMsgCounter++;
            var isAttachment = isAttachmentLink(LiveTextChat.LT.unescapeHtml(autoMessage));
            if(isAttachment){
                var attachemntSrc = j$(j$.parseHTML(LiveTextChat.LT.unescapeHtml(autoMessage))).find('.attachmentLink').attr("href");
                autoMessage = '<div><img id="img-'+chatMsgCounter+'" style="max-width:100%; max-height:100%;cursor:pointer; vertical-align: text-top;" ';
                autoMessage+= 'onclick="openImgInTab(\''+attachemntSrc+'\')" ';
                autoMessage+= 'src="' + attachemntSrc + '"></div>';
            }
            if(isFormMessage(LiveTextChat.LT.unescapeHtml(autoMessage))){
                autoMessage = prepareFormMessage(LiveTextChat.LT.unescapeHtml(autoMessage));
            }
            //-V- new chat design
            var displayName = msgSource == "{!ITRName}" ?  "{!ITRName}" : msgSource == "{!OptInName}" ? $Label.TXT_OPT_Messaging : username;
            var className =  msgSource == "{!ITRName}" || msgSource == "{!OptInName}" ?  "itr" : "agent";
            j$('#chatBox').append(generateMessageToAppend(autoMessage, displayName, className, timestamp, 'senttxtMsg-' + chatMsgCounter, recordId));
            //TODO: if there is an error then we need to append error icon and error message
            j$('.senttxtMsg-' + chatMsgCounter).linkify();
            if(isAttachment){
                j$('.senttxtMsg-' + chatMsgCounter + ' .attachmentLink').click(function(){
                    var tabLink = j$(this).attr("href");
                    var tabLabel = j$(this).text();
                    var tabIcon = "{!URLFOR($Resource.LiveText,'images/LTicon16.png')}";
                    var openSubtab= function(result) {
                        var pID = result.id;
                        sforce.console.openSubtab(pID, tabLink, true,tabLabel, null, function(result){
                            if(result.success !== true){
                                console.log('A console tab for this ' + tabLabel + ' is already open.');
                            }else{
                                sforce.console.setTabIcon(tabIcon,result.id);
                            }
                        });
                    };
                    sforce.console.getEnclosingPrimaryTabId(openSubtab);
                    return false;
                });
            }
            LiveTextChat.LT.playSendReceiveAudio(suppressAudio);
            if(sentToCustomer === false){
                LiveTextChat.LT.addGeneratedError(sentToCustomer, errorCode, errorSubCode, recordId);
            }
            moveTypingNotificationToTheBottom();
            if(scroll){
                if(isAttachment){
                    j$('#img-'+chatMsgCounter).on('load', function(){
                        scrollChatBox(true);
                    })
                }else{
                    scrollChatBox(true);
                }
            }
        }

        function ucwords(str) {
            return (str + '').replace(/^([a-z\u00E0-\u00FC])|\s+([a-z\u00E0-\u00FC])/g, function(j$1) {
                return j$1.toUpperCase();
            });
        }

        function persistObjectLinkingOnRefresh() {
            var conversationObj = getConversationHeaderList();
            if(conversationObj){
                var records = JSON.parse(conversationObj);
                if(records){
                    for(var i = 0; i < records.length; i++){
                        if(objectInformationForLinking || objectInformationForLinking.length != 0){
                            for(var j = 0; j < objectInformationForLinking.length; j++){
                                if(records[i][objectInformationForLinking[j]['relationshipName']] != null){
                                    j$('#'+objectInformationForLinking[j]['recordType']+'LookupText').text(records[i][objectInformationForLinking[j]['relationshipName']][objectInformationForLinking[j]['recordNameField']]);
                                    j$('#'+objectInformationForLinking[j]['recordType']+'CheckBoxLabel').show();
                                    var checkboxObj = j$('#'+objectInformationForLinking[j]['recordType']+'CheckBox');
                                    checkboxObj.attr('checked','checked');
                                    checkboxObj.prop('checked',true);
                                    checkboxObj.attr('objectprefix',objectInformationForLinking[j]['recordPrefix']);
                                    checkboxObj.attr('objectid',records[i][objectInformationForLinking[j]['relationshipName']][fldId]);
                                    checkboxObj.attr('objecttype',objectInformationForLinking[j]['recordType']);
                                    checkboxObj.attr('objectlinkname',records[i][objectInformationForLinking[j]['relationshipName']][objectInformationForLinking[j]['recordNameField']]);
                                    checkboxObj.attr('objectplurallabel',objectInformationForLinking[j]['recordLabelPlural']);
                                    checkboxObj.show();
                                }
                            }
                        }
                    }
                }
            }
        }

        // Use the browser's built-in functionality to quickly and safely escape the
        // string
        function escapeHtml(str) {
            var div = document.createElement('div');
            div.appendChild(document.createTextNode(str));
            return div.innerHTML;
        };

        // UNSAFE with unsafe strings; only use on previously-escaped ones!
        function unescapeHtml(escapedStr) {
            var div = document.createElement('div');
            div.innerHTML = escapedStr;
            var child = div.childNodes[0];
            return child ? child.nodeValue : '';
        };

        // Reset character count and message count
        function resetCount() {
             /* reset character counts*/
             var countString = '0'
            if(getActiveChannelType() != facebookChannel && getActiveChannelType() != appleChannel){
                countString += ' (' + 0 + ')';
            }
            j$('#characterCount').text(countString);
        }

        //sends message when send button is clicked
        function handleMessageSend(rawMessage, chatMsgCounter, isPictureRequest, isFormSend) {
            MessagePayload = new Object();
            MessagePayload.rawMessage = rawMessage;
            MessagePayload.messageId = chatMsgCounter;
            MessagePayload.conversationId = currentConversationRecordId;
            MessagePayload.originatingNumber = getOriginatingNumber();
            MessagePayload.supportNumber = getActiveChannel();
            MessagePayload.isFirstOutboundMessage = isFirstOutboundMessage;
            MessagePayload.isPictureRequest = isPictureRequest;
            MessagePayload.channelType = getActiveChannelType();
            MessagePayload.isFormSend = isFormSend;
            MessagePayload.displayMessage = isFormSend ? currentForm['textPreview'] : '';
            MessagePayload.formId = isFormSend ? currentForm['id'] : '';
            if(isFormSend){
                removeForm();
            }
            Visualforce.remoting.Manager.invokeAction(
                    '{!$RemoteAction.LiveTextChatController.getMessagePayloadResponseWithPicture}',
                    MessagePayload,
                    handleCallbackResult);
            conversationAlertOn = false;
            clearTimeout(conversationTimer);
            conversationShouldTurnRedMap[currentTabId] = false;
            sforce.console.setTabStyle(null, currentTabId, null);
            sforce.console.setTabTextStyle(null, currentTabId);
            conversationShouldTurnRedMap[currentSubTabId] = false;
            sforce.console.setTabStyle(null, currentSubTabId, null);
            sforce.console.setTabTextStyle(null, currentSubTabId, null);
        }

        function addGeneratedError(status, errorCode, errorSubCode, recordId){
            if(status == false || status == 'false'){
                j$(".senttxtMsg-" + recordId).addClass('recordId-' + recordId);
                errorSubCode = errorSubCode === undefined ? null : errorSubCode;
                errorCode = errorCode === undefined ? null : errorCode;
                Visualforce.remoting.Manager.invokeAction(
                    '{!$RemoteAction.LiveTextChatController.getErrorLabel}',
                    errorCode,
                    errorSubCode,
                    function(result, event){
                        console.log(result);
                        if(event.status){
                            displayInsertRecordError(result, ".recordId-" + recordId, recordId);
                        }
                    }, { buffer: false}
                )
            }
        }

        function displayInsertRecordError(message, messageId, recordId) {
            //htmlEntities => Convert special character into HTML readable string
            var content =   '<div id="errorMessage_'+recordId+'">'+
                                '<span class="slds-icon_container slds-icon-utility-warning slds-p-left--x-small" title="' + j$.trim(message) + '">'+
                                    '<svg class="slds-icon slds-icon--x-small slds-icon-text-error" aria-hidden="true">'+
                                        '<use xmlns:xlink="http://www.w3.org/1999/xlink" xlink:href="'+"{!URLFOR($Resource.SLDS202, '/assets/icons/utility-sprite/svg/symbols.svg#error')}"+'"></use>'+
                                    '</svg>'+
                                '</span>'+
                                '<span class="errorMessage">' + j$.trim(message) + '</span>'+
                            '</div>';
            j$(messageId).append(content);
        }

        function handleCallbackResult(result, event){
            var jsonResult = j$.parseJSON(LiveTextChat.LT.unescapeHtml(result));
            if(event.status){
                j$(".recordId-senttxtMsg-" + jsonResult.messageId).addClass('recordId-' + jsonResult.Id).removeClass('recordId-senttxtMsg-' + jsonResult.messageId);
                if(!jsonResult.success){
                    addGeneratedError(jsonResult.success, jsonResult.errorCode, jsonResult.errorSubCode, jsonResult.Id);
                    scrollChatBox(true);
                }else{
                    if(jsonResult.message != null){
                        var markup = j$(".senttxtMsg-" + jsonResult.messageId).html();
                        markup = markup.replace(sendingRequestMessage, jsonResult.message);
                        j$(".senttxtMsg-" + jsonResult.messageId).html(markup);
                        j$(".senttxtMsg-" + jsonResult.messageId).linkify();
                        scrollChatBox(true);
                    }
                    if(isFirstOutboundMessage){
                        var currentPagePhoneNumber = getOriginatingNumber();
                        if(currentPagePhoneNumber != originalPhoneNumber){
                            redirectPrimaryTab(getOriginatingNumber());
                        }else{
                            sforce.console.setTabUnsavedChanges(true, function(){}, currentSubTabId);
                            addTabCloseListener();
                            enableElementsForActiveSession();
                            lockMainTab();
                        }
                    }
                    // at least one message successfully sent, disable phone number buttons
                    enableElementsForActiveSession();
                    lockMainTab();
                }
            }else{
                console.log(event);
            }
        }

        return{
            getUsername: getUsername,
            persistObjectLinkingOnRefresh:persistObjectLinkingOnRefresh,
            utf8ByteLength:utf8ByteLength,
            escapeHtml:escapeHtml,
            unescapeHtml:unescapeHtml,
            resetCount:resetCount,
            playSendReceiveAudio:playSendReceiveAudio,
            handleMessageSend:handleMessageSend,
            handleCallbackResult:handleCallbackResult,
            displayMessageList:displayMessageList,
            displayInsertRecordError:displayInsertRecordError,
            displayOutboundMessage:displayOutboundMessage,
            addGeneratedError:addGeneratedError
        };
    }());

    //Tooltips dynamically resize
    j$( window ).resize(function(){
        j$("#tooltipWrapper").css("max-width", j$("#chatPageDiv").width() - 16);
    });

    //DOCUMENT READY
    j$(document).ready(function() {
        showLoadingProgress();
        disableSessionActiveElements();
        j$('#recipientChannelWithPhoto').hide();

        forcetk.Client.prototype.blob = function (path, fields, filename, payloadField, payload, callback, error, retry) {
            'use strict';
            var that = this,
            url = (this.visualforce ? '' : this.instanceUrl) + '/services/data' + path,
            boundary = randomString(),
            blob = new window.Blob([
                "--boundary_" + boundary + '\n'
                    + "Content-Disposition: form-data; name=\"entity_content\";" + "\n"
                    + "Content-Type: application/json" + "\n\n"
                    + JSON.stringify(fields)
                    + "\n\n"
                    + "--boundary_" + boundary + "\n"
                    + "Content-Type: application/octet-stream" + "\n"
                    + "Content-Disposition: form-data; name=\"" + payloadField
                    + "\"; filename=\"" + filename + "\"\n\n",
                payload,
                "\n\n"
                    + "--boundary_" + boundary + "--"
            ], {type : 'multipart/form-data; boundary=\"boundary_' + boundary + '\"'});

            var data = new FormData();
            data.append('file', blob);

            var headers = {};
            headers['Accept'] = 'application/json';
            headers[this.authzHeader] = "Bearer " + this.sessionId;
            headers['X-User-Agent'] = 'salesforce-toolkit-rest-javascript/' + this.apiVersion;
            headers['Content-Type'] =  'multipart/form-data; boundary=\"boundary_' + boundary + '\"';
            if (this.proxyUrl !== null && !this.visualforce) {
                headers['SalesforceProxy-Endpoint'] = url;
            }

            j$.ajax({
                url :  (this.visualforce ? '' : this.instanceUrl) + '/services/data' + path,
                headers : headers,
                type: 'POST',
                data: data,
                contentType: "multipart/form-data; boundary=boundary_"+boundary,
                processData: false,
                success: function(data, textStatus, xhr) {
                    callback(data);
                },
                error: function() {
                    error(null);
                }
            });

            return null;
        };

        function handleFileSelect(evt){
            hideAttachOptions();
            files = j$.extend( files, evt.target.files );
            sendMMS(true);
        }

        function isImageAttachedToCameraSrc(){
          var elem = document.getElementById('camera');
          if(elem.getAttribute('src') == "" || elem.getAttribute('src') == null){
            return false;
          }else{
            return true;
          }
        }

        document.getElementById('files').addEventListener('change', handleFileSelect, false);

        sforce.console.addEventListener('AutoLinkingComplete', function(result){
            var message = j$.parseJSON(result.message);
            sforce.console.getEnclosingPrimaryTabId(function(priresult){
                if(priresult.id == message.currentPrimaryTabID){ //This check is imp otherwise all other sessions will intercept this event
                    enablePopover();
                    getCurrentConversationHeaderList();
                    newCaseAfterAutolinking = false;
                    addConversationHeaderIdToSessionStorage(currentConversationRecordId);
                }
            });
        });

        sforce.console.addEventListener('associatedObjectsLoaded', function(result){
            var autoLinkingPerformed = isNullOrEmpty(sessionStorage.getItem('autoLinkingPerformed'))
                                       ? []
                                       : JSON.parse(sessionStorage.getItem('autoLinkingPerformed'));
            var message = j$.parseJSON(result.message);
            var containConversationHeaderId = (autoLinkingPerformed.indexOf(currentConversationRecordId) !== -1);
            sforce.console.getEnclosingPrimaryTabId(function(priresult){
                if(priresult.id == message.currentPrimaryTabID && containConversationHeaderId){ //This check is imp otherwise all other sessions will intercept this event
                    enablePopover();
                    getCurrentConversationHeaderList();
                }
            });
        });

        /**
        * This function starts polling the tabdId argument to see if any new Object is created for every 1 sec.
        * @param tabId subTabId of the current focused subtab
        * @return No return value.
        */
        startPollingSubTab = function(subTabId){
            var checkNewTabObjId = function(){
                sforce.console.getFocusedSubtabId(function(focusedResult){
                    if(focusedResult.id == subTabId){
                        sforce.console.getPageInfo(subTabId, function(pageInfoResult){
                            var result =  JSON.parse(pageInfoResult.pageInfo);
                            if(result == null || result.objectId == null){
                                setTimeout(checkNewTabObjId,LiveTextChat.LT.polling_time_interval);
                            }else{
                                Visualforce.remoting.Manager.invokeAction(
                                    '{!$RemoteAction.LiveTextChatController.getObjectInformation}',
                                    result.objectId,
                                    function(result, event){
                                    if(event.status && result != null){
                                        handleLinkRecordsClicked(result);
                                    }else{
                                        console.log('error: ' + event);
                                    }
                                });
                            }
                        });
                    }
                });
            };
            setTimeout(checkNewTabObjId,LiveTextChat.LT.polling_time_interval);
        };

        sforce.console.addEventListener('PrimaryTabFocusChange',function(result){
            var messageObj = JSON.parse(result.message);
                var tempTabId = messageObj['currentPrimaryTabID'];
                sforce.console.getEnclosingPrimaryTabId(function(result){
                    if(tempTabId == result.id){ //This check is required otherwise all the primary tabs opened will fire this event.
                        getFocusedSubtabFuncn();
                    }
                });
            });

        sforce.console.onFocusedSubtab(function(result){
            focusedSubTabId = result.id;
            refreshTabIds(function(){
                checkPageInfoFuncn(focusedSubTabId);
            });
        });

        getFocusedSubtabFuncn();

        j$('#tooltipWrapper').css('position', 'fixed');
        j$("[id$='TooltipIcon']").tooltip({
            animation: false,
            placement: 'left',
            template: '<div class="slds-popover slds-popover--tooltip tooltip" style="" role="tooltip"><div class="slds-popover__body tooltip-inner"></div></div>',
            html: true,
            container: j$('#tooltipWrapper'),
        });
    }); //end on document ready
    //DOCUMENT READY

    //WINDOW LOAD
    window.onload = function() {
        j$('#closeAttachOptionsButton').click(function(){
            j$('#attachOptionsArea').toggle();
            j$('#textControls').toggle();
        });
        getPrimaryTabDetails(function(resultObj) {
            var socialPersonaId = getSafeParameterByName('socialPersonaId', resultObj.url);
            if(socialPersonaId != null && socialPersonaId != ''){
                Visualforce.remoting.Manager.invokeAction(
                    '{!$RemoteAction.LiveTextChatController.getSupportChannels}',
                    getSafeParameterByName('conversationtype', resultObj.url),
                    'social',
                    function(result, event){
                        channelsMap = result.channelObjectsMap;
                        Visualforce.remoting.Manager.invokeAction(
                            '{!$RemoteAction.LiveTextChatController.getSocialPersonaData}',
                            socialPersonaId,
                            function(result, event){
                                if(result){
                                    socialPersonaData = result;
                                    initializeFromPrimaryTab();
                                }
                            })
                    });

            }else{
                Visualforce.remoting.Manager.invokeAction(
                    '{!$RemoteAction.LiveTextChatController.getSupportChannels}',
                    getSafeParameterByName('conversationtype', resultObj.url),
                    'text',
                    function(result, event){
                        if(result){
                            channelsMap = result.channelObjectsMap;
                            formatDisplayedPhoneField();
                            initializeFromPrimaryTab();
                        }
                });
            }
        });
    };
    //WINDOW LOAD
    </script>
</html>
</apex:page>